--------------------------------------------------------
-- Archivo creado  - martes-diciembre-17-2024   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence SEC_LOG_ID
--------------------------------------------------------

   CREATE SEQUENCE  "TLM"."SEC_LOG_ID"  MINVALUE 1 MAXVALUE 99999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEC_LOG_ID_AUDIT_EMPLEADOS
--------------------------------------------------------

   CREATE SEQUENCE  "TLM"."SEC_LOG_ID_AUDIT_EMPLEADOS"  MINVALUE 1 MAXVALUE 99999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEC_LOG_ID_AUDIT_PRODUCTOS
--------------------------------------------------------

   CREATE SEQUENCE  "TLM"."SEC_LOG_ID_AUDIT_PRODUCTOS"  MINVALUE 1 MAXVALUE 99999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEC_LOG_ID_AUDIT_PROVEEDORES
--------------------------------------------------------

   CREATE SEQUENCE  "TLM"."SEC_LOG_ID_AUDIT_PROVEEDORES"  MINVALUE 1 MAXVALUE 99999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEC_LOG_ID_AUDIT_VENTAS
--------------------------------------------------------

   CREATE SEQUENCE  "TLM"."SEC_LOG_ID_AUDIT_VENTAS"  MINVALUE 1 MAXVALUE 99999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table AUDIT_CLIENTES
--------------------------------------------------------

  CREATE TABLE "TLM"."AUDIT_CLIENTES" 
   (	"LOG_ID" NUMBER(*,0), 
	"CEDULA" VARCHAR2(9 BYTE), 
	"NOMBRE" VARCHAR2(30 BYTE), 
	"TIPO" VARCHAR2(20 BYTE), 
	"TELEFONO" VARCHAR2(11 BYTE), 
	"DIRECCION" VARCHAR2(100 BYTE), 
	"CORREO" VARCHAR2(30 BYTE), 
	"ACCION" VARCHAR2(20 BYTE), 
	"FECHA_ACCION" DATE DEFAULT SYSDATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AUDIT_EMPLEADOS
--------------------------------------------------------

  CREATE TABLE "TLM"."AUDIT_EMPLEADOS" 
   (	"LOG_ID" NUMBER(*,0), 
	"CEDULA" VARCHAR2(9 BYTE), 
	"NOMBRE" VARCHAR2(30 BYTE), 
	"TIPO" VARCHAR2(20 BYTE), 
	"TELEFONO" VARCHAR2(11 BYTE), 
	"DIRECCION" VARCHAR2(100 BYTE), 
	"CORREO" VARCHAR2(30 BYTE), 
	"PUESTO" VARCHAR2(50 BYTE), 
	"SALARIO" NUMBER, 
	"ACCION" VARCHAR2(20 BYTE), 
	"FECHA_ACCION" DATE DEFAULT SYSDATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AUDIT_PRODUCTOS
--------------------------------------------------------

  CREATE TABLE "TLM"."AUDIT_PRODUCTOS" 
   (	"LOG_ID" NUMBER(*,0), 
	"CODIGO" NUMBER(*,0), 
	"NOMBRE" VARCHAR2(50 BYTE), 
	"DESCRIPCION" CLOB, 
	"CANTIDAD" NUMBER(*,0), 
	"PRECIO" NUMBER, 
	"ACCION" VARCHAR2(20 BYTE), 
	"FECHA_ACCION" DATE DEFAULT SYSDATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("DESCRIPCION") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table AUDIT_PROVEEDORES
--------------------------------------------------------

  CREATE TABLE "TLM"."AUDIT_PROVEEDORES" 
   (	"LOG_ID" NUMBER(*,0), 
	"CEDULA" VARCHAR2(9 BYTE), 
	"NOMBRE" VARCHAR2(30 BYTE), 
	"TIPO" VARCHAR2(20 BYTE), 
	"TELEFONO" VARCHAR2(11 BYTE), 
	"DIRECCION" VARCHAR2(100 BYTE), 
	"CORREO" VARCHAR2(30 BYTE), 
	"PRODUCTOS" VARCHAR2(300 BYTE), 
	"ACCION" VARCHAR2(20 BYTE), 
	"FECHA_ACCION" DATE DEFAULT SYSDATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AUDIT_VENTAS
--------------------------------------------------------

  CREATE TABLE "TLM"."AUDIT_VENTAS" 
   (	"LOG_ID" NUMBER(*,0), 
	"ID_VENTA" NUMBER, 
	"MONTO" NUMBER, 
	"PRODUCTOS" VARCHAR2(50 BYTE), 
	"PAGO" VARCHAR2(25 BYTE), 
	"COMPRADOR" NUMBER(*,0), 
	"VENDEDOR" NUMBER(*,0), 
	"FECHA" DATE, 
	"CANTIDADES" VARCHAR2(100 BYTE), 
	"ACCION" VARCHAR2(20 BYTE), 
	"FECHA_ACCION" DATE DEFAULT SYSDATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CLIENTES
--------------------------------------------------------

  CREATE TABLE "TLM"."CLIENTES" 
   (	"CEDULA" NUMBER(*,0), 
	"NOMBRE" VARCHAR2(30 BYTE), 
	"TIPO" VARCHAR2(20 BYTE), 
	"TELEFONO" VARCHAR2(11 BYTE), 
	"DIRECCION" VARCHAR2(100 BYTE), 
	"CORREO" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table EMPLEADOS
--------------------------------------------------------

  CREATE TABLE "TLM"."EMPLEADOS" 
   (	"CEDULA" NUMBER(*,0), 
	"NOMBRE" VARCHAR2(50 BYTE), 
	"TIPO" VARCHAR2(20 BYTE), 
	"TELEFONO" VARCHAR2(15 BYTE), 
	"DIRECCION" CLOB, 
	"CORREO" VARCHAR2(50 BYTE), 
	"PUESTO" VARCHAR2(50 BYTE), 
	"SALARIO" NUMBER, 
	"USERNAME" VARCHAR2(30 BYTE), 
	"PASSWORD" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("DIRECCION") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table PRODUCTOS
--------------------------------------------------------

  CREATE TABLE "TLM"."PRODUCTOS" 
   (	"CODIGO" NUMBER(*,0), 
	"NOMBRE" VARCHAR2(50 BYTE), 
	"DESCRIPCION" CLOB, 
	"CANTIDAD" NUMBER(*,0), 
	"PRECIO" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("DESCRIPCION") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table PROVEEDORES
--------------------------------------------------------

  CREATE TABLE "TLM"."PROVEEDORES" 
   (	"CEDULA" NUMBER(*,0), 
	"NOMBRE" VARCHAR2(30 BYTE), 
	"TIPO" VARCHAR2(20 BYTE), 
	"TELEFONO" VARCHAR2(11 BYTE), 
	"DIRECCION" VARCHAR2(100 BYTE), 
	"CORREO" VARCHAR2(30 BYTE), 
	"PRODUCTOS" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table VENTAS
--------------------------------------------------------

  CREATE TABLE "TLM"."VENTAS" 
   (	"ID_VENTA" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"MONTO" NUMBER, 
	"PRODUCTOS" VARCHAR2(50 BYTE), 
	"PAGO" VARCHAR2(25 BYTE), 
	"COMPRADOR" NUMBER(*,0), 
	"VENDEDOR" NUMBER(*,0), 
	"FECHA" DATE, 
	"CANTIDADES" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for View VISTA_CLIENTE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "TLM"."VISTA_CLIENTE" ("CEDULA", "NOMBRE", "TIPO", "TELEFONO", "DIRECCION", "CORREO") AS 
  SELECT 
    CEDULA,
    NOMBRE,
    TIPO,
    TELEFONO,
    DIRECCION,
    CORREO
FROM 
    CLIENTES
;
--------------------------------------------------------
--  DDL for View VISTA_EMPLEADO
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "TLM"."VISTA_EMPLEADO" ("CEDULA", "NOMBRE", "TIPO", "TELEFONO", "DIRECCION", "CORREO", "PUESTO", "SALARIO") AS 
  SELECT 
    CEDULA,
    NOMBRE,
    TIPO,
    TELEFONO,
    DIRECCION,
    CORREO,
    PUESTO,
    SALARIO
FROM 
    EMPLEADOS
;
--------------------------------------------------------
--  DDL for View VISTA_PRODUCTO
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "TLM"."VISTA_PRODUCTO" ("CODIGO", "NOMBRE", "DESCRIPCION", "CANTIDAD", "PRECIO") AS 
  SELECT 
    CODIGO,
    NOMBRE,
    DESCRIPCION,
    CANTIDAD,
    PRECIO
FROM 
    PRODUCTOS
;
--------------------------------------------------------
--  DDL for View VISTA_PROVEEDOR
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "TLM"."VISTA_PROVEEDOR" ("CEDULA", "NOMBRE", "TIPO", "TELEFONO", "DIRECCION", "CORREO", "PRODUCTOS") AS 
  SELECT 
    CEDULA,
    NOMBRE,
    TIPO,
    TELEFONO,
    DIRECCION,
    CORREO,
    PRODUCTOS
FROM 
    PROVEEDORES
;
--------------------------------------------------------
--  DDL for View VISTA_VENTA
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "TLM"."VISTA_VENTA" ("ID_VENTA", "MONTO", "PRODUCTOS", "PAGO", "COMPRADOR", "VENDEDOR", "FECHA", "CANTIDADES") AS 
  SELECT 
    ID_VENTA,
    MONTO,
    PRODUCTOS,
    PAGO,
    COMPRADOR,
    VENDEDOR,
    FECHA,
    CANTIDADES
FROM 
    VENTAS
;
REM INSERTING into TLM.AUDIT_CLIENTES
SET DEFINE OFF;
Insert into TLM.AUDIT_CLIENTES (LOG_ID,CEDULA,NOMBRE,TIPO,TELEFONO,DIRECCION,CORREO,ACCION,FECHA_ACCION) values ('4','123456789','A','Fisica','7','A','A','CREACION',to_date('14/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_CLIENTES (LOG_ID,CEDULA,NOMBRE,TIPO,TELEFONO,DIRECCION,CORREO,ACCION,FECHA_ACCION) values ('5',null,null,null,null,null,null,'ELIMINACION',to_date('14/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_CLIENTES (LOG_ID,CEDULA,NOMBRE,TIPO,TELEFONO,DIRECCION,CORREO,ACCION,FECHA_ACCION) values ('6',null,null,null,null,null,null,'ELIMINACION',to_date('14/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_CLIENTES (LOG_ID,CEDULA,NOMBRE,TIPO,TELEFONO,DIRECCION,CORREO,ACCION,FECHA_ACCION) values ('8','402520190','Frander Rojas','Fisica','70448882','Heredia','franderrojas20@gmail.com','CREACION',to_date('15/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_CLIENTES (LOG_ID,CEDULA,NOMBRE,TIPO,TELEFONO,DIRECCION,CORREO,ACCION,FECHA_ACCION) values ('3',null,null,null,null,null,null,'ELIMINACION',to_date('14/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_CLIENTES (LOG_ID,CEDULA,NOMBRE,TIPO,TELEFONO,DIRECCION,CORREO,ACCION,FECHA_ACCION) values ('0','402520190','Frander Rojas','Fisico',null,null,null,'MODIFICACION',to_date('12/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_CLIENTES (LOG_ID,CEDULA,NOMBRE,TIPO,TELEFONO,DIRECCION,CORREO,ACCION,FECHA_ACCION) values ('1','402520190','Frander Rojas','Fisico',null,null,null,'CREACION',to_date('12/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_CLIENTES (LOG_ID,CEDULA,NOMBRE,TIPO,TELEFONO,DIRECCION,CORREO,ACCION,FECHA_ACCION) values ('2','402520191','Frander Rojas','Fisico',null,null,null,'CREACION',to_date('12/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_CLIENTES (LOG_ID,CEDULA,NOMBRE,TIPO,TELEFONO,DIRECCION,CORREO,ACCION,FECHA_ACCION) values ('7','111111111','Juan','Regular','88885555','San Jos�','juan.perez@mail.com','CREACION',to_date('15/12/24','DD/MM/RR'));
REM INSERTING into TLM.AUDIT_EMPLEADOS
SET DEFINE OFF;
Insert into TLM.AUDIT_EMPLEADOS (LOG_ID,CEDULA,NOMBRE,TIPO,TELEFONO,DIRECCION,CORREO,PUESTO,SALARIO,ACCION,FECHA_ACCION) values ('1','123456788','christian','Fisica','12345678','a','christian@intel.com','auxiliar','100','CREACION',to_date('16/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_EMPLEADOS (LOG_ID,CEDULA,NOMBRE,TIPO,TELEFONO,DIRECCION,CORREO,PUESTO,SALARIO,ACCION,FECHA_ACCION) values ('2','123456789','hola','Fisica','74852136','a','a','a','300','CREACION',to_date('16/12/24','DD/MM/RR'));
REM INSERTING into TLM.AUDIT_PRODUCTOS
SET DEFINE OFF;
Insert into TLM.AUDIT_PRODUCTOS (LOG_ID,CODIGO,NOMBRE,CANTIDAD,PRECIO,ACCION,FECHA_ACCION) values ('8','20258','Zapatos','12','27000','MODIFICACION',to_date('16/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_PRODUCTOS (LOG_ID,CODIGO,NOMBRE,CANTIDAD,PRECIO,ACCION,FECHA_ACCION) values ('1','20258','Zapatos','20','27000','CREACION',to_date('16/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_PRODUCTOS (LOG_ID,CODIGO,NOMBRE,CANTIDAD,PRECIO,ACCION,FECHA_ACCION) values ('2','36952','Collares','5','5000','CREACION',to_date('16/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_PRODUCTOS (LOG_ID,CODIGO,NOMBRE,CANTIDAD,PRECIO,ACCION,FECHA_ACCION) values ('3','20258','Zapatos','19','27000','MODIFICACION',to_date('16/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_PRODUCTOS (LOG_ID,CODIGO,NOMBRE,CANTIDAD,PRECIO,ACCION,FECHA_ACCION) values ('4','36952','Collares','4','5000','MODIFICACION',to_date('16/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_PRODUCTOS (LOG_ID,CODIGO,NOMBRE,CANTIDAD,PRECIO,ACCION,FECHA_ACCION) values ('5','20258','Zapatos','18','27000','MODIFICACION',to_date('16/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_PRODUCTOS (LOG_ID,CODIGO,NOMBRE,CANTIDAD,PRECIO,ACCION,FECHA_ACCION) values ('6','36952','Collares','3','5000','MODIFICACION',to_date('16/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_PRODUCTOS (LOG_ID,CODIGO,NOMBRE,CANTIDAD,PRECIO,ACCION,FECHA_ACCION) values ('7','20258','Zapatos','17','27000','MODIFICACION',to_date('16/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_PRODUCTOS (LOG_ID,CODIGO,NOMBRE,CANTIDAD,PRECIO,ACCION,FECHA_ACCION) values ('21','36952','Collares','2','5000','MODIFICACION',to_date('17/12/24','DD/MM/RR'));
Insert into TLM.AUDIT_PRODUCTOS (LOG_ID,CODIGO,NOMBRE,CANTIDAD,PRECIO,ACCION,FECHA_ACCION) values ('22','36952','Collares','1','5000','MODIFICACION',to_date('17/12/24','DD/MM/RR'));
REM INSERTING into TLM.AUDIT_PROVEEDORES
SET DEFINE OFF;
REM INSERTING into TLM.AUDIT_VENTAS
SET DEFINE OFF;
REM INSERTING into TLM.CLIENTES
SET DEFINE OFF;
Insert into TLM.CLIENTES (CEDULA,NOMBRE,TIPO,TELEFONO,DIRECCION,CORREO) values ('402520190','Frander Rojas','Fisica','70448882','Heredia','franderrojas20@gmail.com');
Insert into TLM.CLIENTES (CEDULA,NOMBRE,TIPO,TELEFONO,DIRECCION,CORREO) values ('111111111','Juan','Regular','88885555','San Jos�','juan.perez@mail.com');
REM INSERTING into TLM.EMPLEADOS
SET DEFINE OFF;
Insert into TLM.EMPLEADOS (CEDULA,NOMBRE,TIPO,TELEFONO,CORREO,PUESTO,SALARIO,USERNAME,PASSWORD) values ('123456788','christian','Fisica','12345678','christian@intel.com','auxiliar','100',null,null);
Insert into TLM.EMPLEADOS (CEDULA,NOMBRE,TIPO,TELEFONO,CORREO,PUESTO,SALARIO,USERNAME,PASSWORD) values ('123456789','hola','Fisica','74852136','a','a','300',null,null);
REM INSERTING into TLM.PRODUCTOS
SET DEFINE OFF;
Insert into TLM.PRODUCTOS (CODIGO,NOMBRE,CANTIDAD,PRECIO) values ('20258','Zapatos','12','27000');
Insert into TLM.PRODUCTOS (CODIGO,NOMBRE,CANTIDAD,PRECIO) values ('36952','Collares','1','5000');
REM INSERTING into TLM.PROVEEDORES
SET DEFINE OFF;
Insert into TLM.PROVEEDORES (CEDULA,NOMBRE,TIPO,TELEFONO,DIRECCION,CORREO,PRODUCTOS) values ('123456789','Proveedor A','Mayorista','88885555','San Jos�, Costa Rica','proveedor_a@mail.com','50');
REM INSERTING into TLM.VENTAS
SET DEFINE OFF;
Insert into TLM.VENTAS (ID_VENTA,MONTO,PRODUCTOS,PAGO,COMPRADOR,VENDEDOR,FECHA,CANTIDADES) values ('2','135000','20258,','Efectivo','402520190','123456789',to_date('16/12/24','DD/MM/RR'),'5,');
Insert into TLM.VENTAS (ID_VENTA,MONTO,PRODUCTOS,PAGO,COMPRADOR,VENDEDOR,FECHA,CANTIDADES) values ('1','27000','20258,','SINPE','402520190','123456789',to_date('16/12/24','DD/MM/RR'),'1,');
--------------------------------------------------------
--  DDL for Index AUDIT_CLIENTES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "TLM"."AUDIT_CLIENTES_PK" ON "TLM"."AUDIT_CLIENTES" ("LOG_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AUDIT_EMPLEADOS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "TLM"."AUDIT_EMPLEADOS_PK" ON "TLM"."AUDIT_EMPLEADOS" ("LOG_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AUDIT_PRODUCTOS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "TLM"."AUDIT_PRODUCTOS_PK" ON "TLM"."AUDIT_PRODUCTOS" ("LOG_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AUDIT_PROVEEDORES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "TLM"."AUDIT_PROVEEDORES_PK" ON "TLM"."AUDIT_PROVEEDORES" ("LOG_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AUDIT_VENTAS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "TLM"."AUDIT_VENTAS_PK" ON "TLM"."AUDIT_VENTAS" ("LOG_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CLIENTES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "TLM"."CLIENTES_PK" ON "TLM"."CLIENTES" ("CEDULA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PROVEEDORES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "TLM"."PROVEEDORES_PK" ON "TLM"."PROVEEDORES" ("CEDULA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index VENTAS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "TLM"."VENTAS_PK" ON "TLM"."VENTAS" ("ID_VENTA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger TRG_AUDIT_CLIENTES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TLM"."TRG_AUDIT_CLIENTES" 
BEFORE UPDATE OR DELETE OR INSERT ON CLIENTES
FOR EACH ROW
BEGIN
    IF  UPDATING THEN
    INSERT  INTO AUDIT_CLIENTES VALUES (null, :NEW.CEDULA, :NEW.NOMBRE, :NEW.TIPO, :NEW.TELEFONO, :NEW.DIRECCION, :NEW.CORREO, 'MODIFICACION', SYSDATE);
    ELSIF DELETING THEN
    INSERT  INTO AUDIT_CLIENTES VALUES (null, :OLD.CEDULA, :OLD.NOMBRE, :OLD.TIPO, :OLD.TELEFONO, :OLD.DIRECCION, :OLD.CORREO, 'ELIMINACION', SYSDATE);
    ELSIF INSERTING THEN
    INSERT  INTO AUDIT_CLIENTES VALUES (null, :NEW.CEDULA, :NEW.NOMBRE, :NEW.TIPO, :NEW.TELEFONO, :NEW.DIRECCION, :NEW.CORREO, 'CREACION', SYSDATE);
    END IF;
EXCEPTION     
  WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR: '|| SQLCODE || ' ' || SQLERRM);          
END;
/
ALTER TRIGGER "TLM"."TRG_AUDIT_CLIENTES" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_AUDIT_EMPLEADOS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TLM"."TRG_AUDIT_EMPLEADOS" 
BEFORE UPDATE OR DELETE OR INSERT ON EMPLEADOS
FOR EACH ROW
BEGIN
    IF  UPDATING THEN
    INSERT  INTO AUDIT_EMPLEADOS VALUES (null, :NEW.CEDULA, :NEW.NOMBRE, :NEW.TIPO, :NEW.TELEFONO, :NEW.DIRECCION, :NEW.CORREO, :NEW.PUESTO, :NEW.SALARIO, 'MODIFICACION', SYSDATE);
    ELSIF DELETING THEN
    INSERT  INTO AUDIT_EMPLEADOS VALUES (null, :OLD.CEDULA, :OLD.NOMBRE, :OLD.TIPO, :OLD.TELEFONO, :OLD.DIRECCION, :OLD.CORREO, :OLD.PUESTO, :OLD.SALARIO, 'ELIMINACION', SYSDATE);
    ELSIF INSERTING THEN
    INSERT  INTO AUDIT_EMPLEADOS VALUES (null, :NEW.CEDULA, :NEW.NOMBRE, :NEW.TIPO, :NEW.TELEFONO, :NEW.DIRECCION, :NEW.CORREO, :NEW.PUESTO, :NEW.SALARIO, 'CREACION', SYSDATE);
    END IF;
EXCEPTION     
  WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR: '|| SQLCODE || ' ' || SQLERRM);          
END;
/
ALTER TRIGGER "TLM"."TRG_AUDIT_EMPLEADOS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_AUDIT_PRODUCTOS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TLM"."TRG_AUDIT_PRODUCTOS" 
BEFORE UPDATE OR DELETE OR INSERT ON PRODUCTOS
FOR EACH ROW
BEGIN
    IF  UPDATING THEN
    INSERT  INTO AUDIT_PRODUCTOS VALUES (null, :NEW.CODIGO, :NEW.NOMBRE, :NEW.DESCRIPCION, :NEW.CANTIDAD, :NEW.PRECIO, 'MODIFICACION', SYSDATE);
    ELSIF DELETING THEN
    INSERT  INTO AUDIT_PRODUCTOS VALUES (null, :OLD.CODIGO, :OLD.NOMBRE, :OLD.DESCRIPCION, :OLD.CANTIDAD, :OLD.PRECIO, 'ELIMINACION', SYSDATE);
    ELSIF INSERTING THEN
    INSERT  INTO AUDIT_PRODUCTOS VALUES (null, :NEW.CODIGO, :NEW.NOMBRE, :NEW.DESCRIPCION, :NEW.CANTIDAD, :NEW.PRECIO, 'CREACION', SYSDATE);
    END IF;
EXCEPTION     
  WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR: '|| SQLCODE || ' ' || SQLERRM);          
END;
/
ALTER TRIGGER "TLM"."TRG_AUDIT_PRODUCTOS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_AUDIT_PROVEEDORES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TLM"."TRG_AUDIT_PROVEEDORES" 
BEFORE UPDATE OR DELETE OR INSERT ON PROVEEDORES
FOR EACH ROW
BEGIN
    IF  UPDATING THEN
    INSERT  INTO AUDIT_PROVEEDORES VALUES (null, :NEW.CEDULA, :NEW.NOMBRE, :NEW.TIPO, :NEW.TELEFONO, :NEW.DIRECCION, :NEW.CORREO, :NEW.PRODUCTOS, 'MODIFICACION', SYSDATE);
    ELSIF DELETING THEN
    INSERT  INTO AUDIT_PROVEEDORES VALUES (null, :OLD.CEDULA, :OLD.NOMBRE, :OLD.TIPO, :OLD.TELEFONO, :OLD.DIRECCION, :OLD.CORREO, :OLD.PRODUCTOS, 'ELIMINACION', SYSDATE);
    ELSIF INSERTING THEN
    INSERT  INTO AUDIT_PROVEEDORES VALUES (null, :NEW.CEDULA, :NEW.NOMBRE, :NEW.TIPO, :NEW.TELEFONO, :NEW.DIRECCION, :NEW.CORREO, :NEW.PRODUCTOS, 'CREACION', SYSDATE);
    END IF;
EXCEPTION     
  WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR: '|| SQLCODE || ' ' || SQLERRM);          
END;
/
ALTER TRIGGER "TLM"."TRG_AUDIT_PROVEEDORES" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LOG_ID_AUDIT_CLIENTES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TLM"."TRG_LOG_ID_AUDIT_CLIENTES" 
BEFORE INSERT ON AUDIT_CLIENTES
FOR EACH ROW
BEGIN
  :new.LOG_ID := SEC_LOG_ID.NEXTVAL;
END;
/
ALTER TRIGGER "TLM"."TRG_LOG_ID_AUDIT_CLIENTES" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LOG_ID_AUDIT_EMPLEADOS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TLM"."TRG_LOG_ID_AUDIT_EMPLEADOS" 
BEFORE INSERT ON AUDIT_EMPLEADOS
FOR EACH ROW
BEGIN
  :new.LOG_ID := SEC_LOG_ID_AUDIT_EMPLEADOS.NEXTVAL;
  EXCEPTION     
  WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR: '|| SQLCODE || ' ' || SQLERRM);  
END;
/
ALTER TRIGGER "TLM"."TRG_LOG_ID_AUDIT_EMPLEADOS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LOG_ID_AUDIT_PRODUCTOS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TLM"."TRG_LOG_ID_AUDIT_PRODUCTOS" 
BEFORE INSERT ON AUDIT_PRODUCTOS
FOR EACH ROW
BEGIN
  :new.LOG_ID := SEC_LOG_ID_AUDIT_PRODUCTOS.NEXTVAL;
  EXCEPTION     
  WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR: '|| SQLCODE || ' ' || SQLERRM);  
END;
/
ALTER TRIGGER "TLM"."TRG_LOG_ID_AUDIT_PRODUCTOS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LOG_ID_AUDIT_PROVEEDORES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TLM"."TRG_LOG_ID_AUDIT_PROVEEDORES" 
BEFORE INSERT ON AUDIT_PROVEEDORES
FOR EACH ROW
BEGIN
  :new.LOG_ID := SEC_LOG_ID_AUDIT_PROVEEDORES.NEXTVAL;
  EXCEPTION     
  WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR: '|| SQLCODE || ' ' || SQLERRM);  
END;
/
ALTER TRIGGER "TLM"."TRG_LOG_ID_AUDIT_PROVEEDORES" ENABLE;
--------------------------------------------------------
--  DDL for Procedure ACTUALIZAR_CLIENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."ACTUALIZAR_CLIENTE" (
    CEDULA_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN VARCHAR2,
    CORREO_IN IN VARCHAR2
) AS
BEGIN
    UPDATE CLIENTES
    SET NOMBRE = NOMBRE_IN,
        TELEFONO = TELEFONO_IN,
        DIRECCION = DIRECCION_IN,
        CORREO = CORREO_IN
    WHERE CEDULA = CEDULA_IN;

    DBMS_OUTPUT.PUT_LINE('Cliente actualizado correctamente: ' || CEDULA_IN);
END;

/
--------------------------------------------------------
--  DDL for Procedure ACTUALIZAR_EMPLEADO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."ACTUALIZAR_EMPLEADO" (
    CEDULA_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN CLOB,
    CORREO_IN IN VARCHAR2,
    PUESTO_IN IN VARCHAR2,
    SALARIO_IN IN NUMBER
) AS
BEGIN
    UPDATE TLM.EMPLEADOS
    SET NOMBRE = NOMBRE_IN,
        TIPO = TIPO_IN,
        TELEFONO = TELEFONO_IN,
        DIRECCION = DIRECCION_IN,
        CORREO = CORREO_IN,
        PUESTO = PUESTO_IN,
        SALARIO = SALARIO_IN
    WHERE CEDULA = CEDULA_IN;

    DBMS_OUTPUT.PUT_LINE('Empleado actualizado correctamente: ' || CEDULA_IN);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: El empleado con c�dula ' || CEDULA_IN || ' no existe.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al actualizar empleado: ' || SQLERRM);
END;

/
--------------------------------------------------------
--  DDL for Procedure ACTUALIZAR_PRODUCTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."ACTUALIZAR_PRODUCTO" (
    CODIGO_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    DESCRIPCION_IN IN CLOB,
    CANTIDAD_IN IN INT,
    PRECIO_IN IN NUMBER
) AS
BEGIN
    UPDATE TLM.PRODUCTOS
    SET NOMBRE = NOMBRE_IN,
        DESCRIPCION = DESCRIPCION_IN,
        CANTIDAD = CANTIDAD_IN,
        PRECIO = PRECIO_IN
    WHERE CODIGO = CODIGO_IN;

    DBMS_OUTPUT.PUT_LINE('Producto actualizado correctamente: ' || NOMBRE_IN);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: El producto con c�digo ' || CODIGO_IN || ' no existe.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al actualizar producto: ' || SQLERRM);
END;

/
--------------------------------------------------------
--  DDL for Procedure ACTUALIZAR_PROVEEDOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."ACTUALIZAR_PROVEEDOR" (
    CEDULA_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN VARCHAR2,
    CORREO_IN IN VARCHAR2,
    PRODUCTOS_IN IN VARCHAR2
) AS
BEGIN
    UPDATE PROVEEDORES
    SET NOMBRE = NOMBRE_IN,
        TELEFONO = TELEFONO_IN,
        DIRECCION = DIRECCION_IN,
        CORREO = CORREO_IN,
        PRODUCTOS = PRODUCTOS_IN
    WHERE CEDULA = CEDULA_IN;

    DBMS_OUTPUT.PUT_LINE('Proveedor actualizado correctamente: ' || CEDULA_IN);
END;

/
--------------------------------------------------------
--  DDL for Procedure ACTUALIZAR_VENTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."ACTUALIZAR_VENTA" (
    ID_IN NUMBER,
    MONTO_IN NUMBER,
    PRODUCTOS_IN VARCHAR2,
    PAGO_IN VARCHAR2,
    COMPRADOR_IN VARCHAR2,
    VENDEDOR_IN VARCHAR2,
    CANTIDADES_IN VARCHAR2
) AS
BEGIN
    -- Actualiza la venta
    UPDATE TLM.VENTAS
    SET MONTO = MONTO_IN,
        PRODUCTOS = PRODUCTOS_IN,
        PAGO = PAGO_IN,
        COMPRADOR = COMPRADOR_IN,
        VENDEDOR = VENDEDOR_IN,
        CANTIDADES = CANTIDADES_IN,
        FECHA = SYSDATE
    WHERE ID_VENTA = ID_IN;

    DBMS_OUTPUT.PUT_LINE('Venta actualizada correctamente. ID: ' || ID_IN);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: Venta no encontrada.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al actualizar la venta: ' || SQLERRM);
END;

/
--------------------------------------------------------
--  DDL for Procedure BUSCAR_CLIENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."BUSCAR_CLIENTE" (CED IN INT, CURSOR_CLIENTE OUT SYS_REFCURSOR)
AS
BEGIN
OPEN CURSOR_CLIENTE FOR
SELECT * FROM VISTA_CLIENTE WHERE CEDULA=CED;
END;

/
--------------------------------------------------------
--  DDL for Procedure BUSCAR_EMPLEADO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."BUSCAR_EMPLEADO" (CED IN INT, CURSOR_EMPLEADO OUT SYS_REFCURSOR)
AS
BEGIN
OPEN CURSOR_EMPLEADO FOR
SELECT * FROM VISTA_EMPLEADO WHERE CEDULA=CED;
EXCEPTION     
  WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR: '|| SQLCODE || ' ' || SQLERRM);  
END;

/
--------------------------------------------------------
--  DDL for Procedure BUSCAR_PRODUCTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."BUSCAR_PRODUCTO" (COD IN INT, CURSOR_PRODUCTO OUT SYS_REFCURSOR)
AS
BEGIN
OPEN CURSOR_PRODUCTO FOR
SELECT * FROM VISTA_PRODUCTO WHERE CODIGO=COD;
EXCEPTION     
  WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR: '|| SQLCODE || ' ' || SQLERRM);  
END;

/
--------------------------------------------------------
--  DDL for Procedure BUSCAR_PROVEEDOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."BUSCAR_PROVEEDOR" (CED IN INT, CURSOR_PROVEEDOR OUT SYS_REFCURSOR)
AS
BEGIN
OPEN CURSOR_PROVEEDOR FOR
SELECT * FROM VISTA_PROVEEDOR WHERE CEDULA=CED;
EXCEPTION     
  WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR: '|| SQLCODE || ' ' || SQLERRM);  
END;

/
--------------------------------------------------------
--  DDL for Procedure BUSCAR_VENTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."BUSCAR_VENTA" (IDV IN NUMBER, CURSOR_VENTA OUT SYS_REFCURSOR)
AS
BEGIN
OPEN CURSOR_VENTA FOR
SELECT * FROM VISTA_VENTA WHERE ID_VENTA=IDV;
EXCEPTION     
  WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR: '|| SQLCODE || ' ' || SQLERRM);  
END;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_CLIENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."ELIMINAR_CLIENTE" (
    CEDULA_IN IN VARCHAR2
) AS
BEGIN
    DELETE FROM CLIENTES
    WHERE CEDULA = CEDULA_IN;
    DBMS_OUTPUT.PUT_LINE('Cliente eliminado correctamente: ' || CEDULA_IN);
END;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_EMPLEADO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."ELIMINAR_EMPLEADO" (
    CEDULA_IN IN INT
) AS
    V_COUNT NUMBER;
BEGIN
    -- Verificar si el registro existe
    SELECT COUNT(*) INTO V_COUNT
    FROM TLM.EMPLEADOS
    WHERE CEDULA = CEDULA_IN;

    IF V_COUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Error: El empleado con c�dula ' || CEDULA_IN || ' no existe.');
    ELSE
        -- Eliminar el registro
        DELETE FROM TLM.EMPLEADOS
        WHERE CEDULA = CEDULA_IN;

        DBMS_OUTPUT.PUT_LINE('Empleado eliminado correctamente: ' || CEDULA_IN);
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al eliminar empleado: ' || SQLERRM);
END;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_PRODUCTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."ELIMINAR_PRODUCTO" (
    CODIGO_IN IN INT
) AS
    V_COUNT NUMBER;
BEGIN
    -- Verificar si el registro existe
    SELECT COUNT(*) INTO V_COUNT
    FROM TLM.PRODUCTOS
    WHERE CODIGO = CODIGO_IN;

    IF V_COUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Error: El producto con c�digo ' || CODIGO_IN || ' no existe.');
    ELSE
        -- Eliminar el registro
        DELETE FROM TLM.PRODUCTOS
        WHERE CODIGO = CODIGO_IN;

        DBMS_OUTPUT.PUT_LINE('Producto eliminado correctamente: C�digo ' || CODIGO_IN);
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al eliminar producto: ' || SQLERRM);
END;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_PROVEEDOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."ELIMINAR_PROVEEDOR" (
    CEDULA_IN IN INT
) AS
BEGIN
    DELETE FROM PROVEEDORES
    WHERE CEDULA = CEDULA_IN;

    DBMS_OUTPUT.PUT_LINE('Proveedor eliminado correctamente: ' || CEDULA_IN);
END;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_VENTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."ELIMINAR_VENTA" (
    ID_IN NUMBER
) AS
    V_COUNT NUMBER;
BEGIN
    -- Verificar si el registro existe
    SELECT COUNT(*) INTO V_COUNT
    FROM TLM.VENTAS
    WHERE ID_VENTA = ID_IN;

    IF V_COUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Error: La venta con ID ' || ID_IN || ' no existe.');
    ELSE
        -- Eliminar el registro
        DELETE FROM TLM.VENTAS
        WHERE ID_VENTA = ID_IN;

        DBMS_OUTPUT.PUT_LINE('Venta eliminada correctamente. ID: ' || ID_IN);
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al eliminar la venta: ' || SQLERRM);
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTAR_CLIENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."INSERTAR_CLIENTE" (
    CEDULA_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN VARCHAR2,
    CORREO_IN IN VARCHAR2
) AS
BEGIN
    INSERT INTO CLIENTES (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO)
    VALUES (CEDULA_IN, NOMBRE_IN, TIPO_IN, TELEFONO_IN, DIRECCION_IN, CORREO_IN);
    DBMS_OUTPUT.PUT_LINE('Cliente insertado correctamente: ' || CEDULA_IN);
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTAR_EMPLEADO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."INSERTAR_EMPLEADO" (
    CEDULA_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN CLOB,
    CORREO_IN IN VARCHAR2,
    PUESTO_IN IN VARCHAR2,
    SALARIO_IN IN NUMBER
) AS
BEGIN
    INSERT INTO TLM.EMPLEADOS (
        CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PUESTO, SALARIO
    )
    VALUES (
        CEDULA_IN, NOMBRE_IN, TIPO_IN, TELEFONO_IN, DIRECCION_IN, CORREO_IN, PUESTO_IN, SALARIO_IN
    );

    DBMS_OUTPUT.PUT_LINE('Empleado creado correctamente: ' || CEDULA_IN);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Error: El empleado con c�dula ' || CEDULA_IN || ' ya existe.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al crear empleado: ' || SQLERRM);
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTAR_PRODUCTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."INSERTAR_PRODUCTO" (
    CODIGO_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    DESCRIPCION_IN IN CLOB,
    CANTIDAD_IN IN INT,
    PRECIO_IN IN NUMBER
) AS
BEGIN
    INSERT INTO TLM.PRODUCTOS (
        CODIGO, NOMBRE, DESCRIPCION, CANTIDAD, PRECIO
    )
    VALUES (
        CODIGO_IN, NOMBRE_IN, DESCRIPCION_IN, CANTIDAD_IN, PRECIO_IN
    );

    DBMS_OUTPUT.PUT_LINE('Producto creado correctamente: ' || NOMBRE_IN);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Error: El producto con c�digo ' || CODIGO_IN || ' ya existe.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al INSERTAR producto: ' || SQLERRM);
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTAR_PROVEEDOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."INSERTAR_PROVEEDOR" (
    CEDULA_IN IN VARCHAR2,
    NOMBRE_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN VARCHAR2,
    CORREO_IN IN VARCHAR2,
    PRODUCTOS_IN IN NUMBER
) AS
BEGIN
    INSERT INTO TLM.PROVEEDORES (
        CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PRODUCTOS
    )
    VALUES (
        CEDULA_IN, NOMBRE_IN, TIPO_IN, TELEFONO_IN, DIRECCION_IN, CORREO_IN, PRODUCTOS_IN
    );

    DBMS_OUTPUT.PUT_LINE('Proveedor creado correctamente: ' || CEDULA_IN);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Error: El proveedor con c�dula ' || CEDULA_IN || ' ya existe.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al INSERTAR proveedor: ' || SQLERRM);
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTAR_VENTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."INSERTAR_VENTA" (
    MONTO_IN NUMBER,
    PRODUCTOS_IN VARCHAR2,
    PAGO_IN VARCHAR2,
    COMPRADOR_IN INT,
    VENDEDOR_IN INT,
    CANTIDADES_IN VARCHAR2
) AS
    --EXISTENCIAS INT;
BEGIN
    -- Verifica si el producto existe y tiene suficientes existencias
    /*SELECT CANTIDAD INTO EXISTENCIAS 
    FROM TLM.PRODUCTOS 
    WHERE NOMBRE = PRODUCTOS_IN;

    IF EXISTENCIAS < CANTIDADES_IN THEN
        RAISE_APPLICATION_ERROR(-20001, 'Error: No hay suficientes existencias para la venta.');
    END IF;*/
    -- Inserta la venta en TLM.VENTAS
    INSERT INTO TLM.VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
    VALUES (MONTO_IN, PRODUCTOS_IN, PAGO_IN, COMPRADOR_IN, VENDEDOR_IN, SYSDATE, CANTIDADES_IN);
    -- Actualiza el inventario de TLM.PRODUCTOS
    /*UPDATE TLM.PRODUCTOS 
    SET CANTIDAD = CANTIDAD - CANTIDADES_IN 
    WHERE CODIGO = PRODUCTOS_IN;*/

    DBMS_OUTPUT.PUT_LINE('Venta registrada correctamente.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: Producto no encontrado.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al registrar la venta: ' || SQLERRM);
END;

/
--------------------------------------------------------
--  DDL for Procedure OBTENER_CANTIDADES_PRODUCTOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."OBTENER_CANTIDADES_PRODUCTOS" (ITEM IN INT, CURSOR_CANTIDADES OUT SYS_REFCURSOR) AS
BEGIN
OPEN CURSOR_CANTIDADES FOR
SELECT CANTIDAD FROM PRODUCTOS WHERE CODIGO=ITEM;
END;

/
--------------------------------------------------------
--  DDL for Procedure OBTENER_DATOS_PRODUCTOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."OBTENER_DATOS_PRODUCTOS" (ITEM IN INT, CURSOR_DATOS OUT SYS_REFCURSOR) AS
BEGIN
OPEN CURSOR_DATOS FOR
SELECT CODIGO, NOMBRE, PRECIO FROM PRODUCTOS WHERE CODIGO=ITEM;
END;

/
--------------------------------------------------------
--  DDL for Procedure OBTENER_PRODUCTOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."OBTENER_PRODUCTOS" ( CURSOR_PRODUCTOS OUT SYS_REFCURSOR) AS
BEGIN
OPEN CURSOR_PRODUCTOS FOR
SELECT CODIGO FROM PRODUCTOS;
END;

/
--------------------------------------------------------
--  DDL for Procedure PRUEBA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."PRUEBA" (cursor out sys_refcursor) as
begin
open cursor for
select * from empleados;
end;

/
--------------------------------------------------------
--  DDL for Procedure REPORTE_PRODUCTOS_DINAMICO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."REPORTE_PRODUCTOS_DINAMICO" (
    FILTRO_CANTIDAD IN VARCHAR2 DEFAULT NULL, -- Ejemplo: 'CANTIDAD > 10'
    FILTRO_PRECIO IN VARCHAR2 DEFAULT NULL,  -- Ejemplo: 'PRECIO < 20000'
    ORDEN_COL IN VARCHAR2 DEFAULT NULL,      -- Ejemplo: 'PRECIO'
    ORDEN_TIPO IN VARCHAR2 DEFAULT NULL      -- Ejemplo: 'DESC'
) AS
    QUERY VARCHAR2(2000);
    CURSOR_RESULT SYS_REFCURSOR;
    PRODUCTO_ROW PRODUCTOS%ROWTYPE;
BEGIN
    -- Construcci�n inicial de la consulta
    QUERY := 'SELECT * FROM PRODUCTOS WHERE 1=1';

    -- Agregar filtros din�micos
    IF FILTRO_CANTIDAD IS NOT NULL THEN
        QUERY := QUERY || ' AND ' || FILTRO_CANTIDAD;
    END IF;

    IF FILTRO_PRECIO IS NOT NULL THEN
        QUERY := QUERY || ' AND ' || FILTRO_PRECIO;
    END IF;

    -- Agregar orden din�mico
    IF ORDEN_COL IS NOT NULL THEN
        QUERY := QUERY || ' ORDER BY ' || ORDEN_COL;

        -- Si se especifica el tipo de orden
        IF ORDEN_TIPO IS NOT NULL THEN
            QUERY := QUERY || ' ' || ORDEN_TIPO;
        END IF;
    END IF;

    -- Abre el cursor din�mico
    OPEN CURSOR_RESULT FOR QUERY;

    -- Muestra cada fila del resultado
    LOOP
        FETCH CURSOR_RESULT INTO PRODUCTO_ROW;
        EXIT WHEN CURSOR_RESULT%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE(
            'Producto: ' || PRODUCTO_ROW.NOMBRE || 
            ', Precio: ' || PRODUCTO_ROW.PRECIO || 
            ', Cantidad: ' || PRODUCTO_ROW.CANTIDAD
        );
    END LOOP;

    -- Cierra el cursor
    CLOSE CURSOR_RESULT;

    -- Mensaje adicional
    DBMS_OUTPUT.PUT_LINE('Consulta din�mica ejecutada: ' || QUERY);
END;

/
--------------------------------------------------------
--  DDL for Procedure VER_CLIENTES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."VER_CLIENTES" (CURSOR_CLIENTE OUT SYS_REFCURSOR)
AS
BEGIN
OPEN CURSOR_CLIENTE FOR
SELECT * FROM VISTA_CLIENTE;
END;

/
--------------------------------------------------------
--  DDL for Procedure VER_EMPLEADOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."VER_EMPLEADOS" (CURSOR_EMPLEADO OUT SYS_REFCURSOR)
AS
BEGIN
OPEN CURSOR_EMPLEADO FOR
SELECT * FROM VISTA_EMPLEADO;
EXCEPTION     
  WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR: '|| SQLCODE || ' ' || SQLERRM);  
END;

/
--------------------------------------------------------
--  DDL for Procedure VER_PRODUCTOS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."VER_PRODUCTOS" (CURSOR_PRODUCTO OUT SYS_REFCURSOR)
AS
BEGIN
OPEN CURSOR_PRODUCTO FOR
SELECT * FROM VISTA_PRODUCTO;
EXCEPTION     
  WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR: '|| SQLCODE || ' ' || SQLERRM);  
END;

/
--------------------------------------------------------
--  DDL for Procedure VER_PROVEEDORES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."VER_PROVEEDORES" (CURSOR_PROVEEDOR OUT SYS_REFCURSOR)
AS
BEGIN
OPEN CURSOR_PROVEEDOR FOR
SELECT * FROM VISTA_PROVEEDOR;
EXCEPTION     
  WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR: '|| SQLCODE || ' ' || SQLERRM);  
END;

/
--------------------------------------------------------
--  DDL for Procedure VER_VENTAS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "TLM"."VER_VENTAS" (CURSOR_VENTA OUT SYS_REFCURSOR)
AS
BEGIN
OPEN CURSOR_VENTA FOR
SELECT * FROM VISTA_VENTA;
EXCEPTION     
  WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR: '|| SQLCODE || ' ' || SQLERRM);  
END;

/
--------------------------------------------------------
--  DDL for Package PKG_INVENTARIO
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "TLM"."PKG_INVENTARIO" AS
    PROCEDURE ACTUALIZAR_INVENTARIO(
        CODIGO_IN INT,
        CANTIDAD_IN INT
    );
    FUNCTION CALCULAR_PRECIO_TOTAL(
        PRECIO_IN NUMBER,
        CANTIDAD_IN NUMBER
    ) RETURN NUMBER;
    PROCEDURE CALCULAR(PRECIO IN NUMBER,CANTIDAD IN NUMBER, TOTAL OUT NUMBER);
END PKG_INVENTARIO;

/
--------------------------------------------------------
--  DDL for Package PKG_VENTAS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "TLM"."PKG_VENTAS" AS
    -- Procedimientos y funciones
    PROCEDURE REGISTRAR_VENTA(
        MONTO_IN NUMBER,
        PRODUCTOS_IN VARCHAR2,
        PAGO_IN VARCHAR2,
        COMPRADOR_IN VARCHAR2,
        VENDEDOR_IN VARCHAR2,
        CANTIDADES_IN NUMBER
    );

    PROCEDURE LEER_VENTAS(
        CRITERIO_IN VARCHAR2 DEFAULT NULL
    );

    PROCEDURE MODIFICAR_VENTA(
        ID_IN NUMBER,
        MONTO_IN NUMBER,
        PRODUCTOS_IN VARCHAR2,
        PAGO_IN VARCHAR2,
        COMPRADOR_IN VARCHAR2,
        VENDEDOR_IN VARCHAR2,
        CANTIDADES_IN NUMBER
    );

    PROCEDURE BORRAR_VENTA(
        ID_IN NUMBER
    );

    FUNCTION CALCULAR_MONTO(
        MONTO_IN NUMBER,
        IMPUESTO_IN NUMBER,
        DESCUENTO_IN NUMBER
    ) RETURN NUMBER;
END PKG_VENTAS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_INVENTARIO
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "TLM"."PKG_INVENTARIO" AS
    PROCEDURE ACTUALIZAR_INVENTARIO(
        CODIGO_IN INT,
        CANTIDAD_IN INT
    ) IS
    BEGIN
        UPDATE PRODUCTOS
        SET CANTIDAD = CANTIDAD + CANTIDAD_IN
        WHERE CODIGO = CODIGO_IN;
    END;

    FUNCTION CALCULAR_PRECIO_TOTAL(
        PRECIO_IN NUMBER,
        CANTIDAD_IN NUMBER
    ) RETURN NUMBER IS
    BEGIN
        RETURN PRECIO_IN * CANTIDAD_IN;
    END;
    PROCEDURE CALCULAR(PRECIO IN NUMBER,CANTIDAD IN NUMBER, TOTAL OUT NUMBER)
    IS
    BEGIN
    SELECT CALCULAR_PRECIO_TOTAL(PRECIO,CANTIDAD) INTO TOTAL FROM DUAL;
    END;
END PKG_INVENTARIO;

/
--------------------------------------------------------
--  DDL for Package Body PKG_VENTAS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "TLM"."PKG_VENTAS" AS
    -- INSERTAR una venta
    PROCEDURE REGISTRAR_VENTA(
        MONTO_IN NUMBER,
        PRODUCTOS_IN VARCHAR2,
        PAGO_IN VARCHAR2,
        COMPRADOR_IN VARCHAR2,
        VENDEDOR_IN VARCHAR2,
        CANTIDADES_IN NUMBER
    ) IS
        EXISTENCIAS INT;
    BEGIN
        -- Verifica si el producto existe y tiene suficientes existencias
        SELECT CANTIDAD INTO EXISTENCIAS 
        FROM TLM.PRODUCTOS 
        WHERE NOMBRE = PRODUCTOS_IN;

        IF EXISTENCIAS < CANTIDADES_IN THEN
            RAISE_APPLICATION_ERROR(-20001, 'Error: No hay suficientes existencias para la venta.');
        END IF;

        -- Inserta la venta en TLM.VENTAS
        INSERT INTO TLM.VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
        VALUES (MONTO_IN, PRODUCTOS_IN, PAGO_IN, COMPRADOR_IN, VENDEDOR_IN, SYSDATE, CANTIDADES_IN);

        -- Actualiza el inventario de TLM.PRODUCTOS
        UPDATE TLM.PRODUCTOS 
        SET CANTIDAD = CANTIDAD - CANTIDADES_IN 
        WHERE NOMBRE = PRODUCTOS_IN;

        DBMS_OUTPUT.PUT_LINE('Venta registrada correctamente.');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Error: Producto no encontrado.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al registrar la venta: ' || SQLERRM);
    END REGISTRAR_VENTA;

    -- Leer ventas
    PROCEDURE LEER_VENTAS(
        CRITERIO_IN VARCHAR2 DEFAULT NULL
    ) IS
        CURSOR_VENTAS SYS_REFCURSOR;
        VENTA_ROW TLM.VENTAS%ROWTYPE;
    BEGIN
        IF CRITERIO_IN IS NULL THEN
            OPEN CURSOR_VENTAS FOR
            SELECT * FROM TLM.VENTAS;
        ELSE
            OPEN CURSOR_VENTAS FOR
            SELECT * FROM TLM.VENTAS WHERE COMPRADOR LIKE '%' || CRITERIO_IN || '%';
        END IF;

        LOOP
            FETCH CURSOR_VENTAS INTO VENTA_ROW;
            EXIT WHEN CURSOR_VENTAS%NOTFOUND;

            DBMS_OUTPUT.PUT_LINE(
                'Venta ID: ' || VENTA_ROW.ID_VENTA || 
                ', Monto: ' || VENTA_ROW.MONTO || 
                ', Producto: ' || VENTA_ROW.PRODUCTOS || 
                ', Comprador: ' || VENTA_ROW.COMPRADOR || 
                ', Fecha: ' || VENTA_ROW.FECHA
            );
        END LOOP;

        CLOSE CURSOR_VENTAS;
    END LEER_VENTAS;

    -- Actualizar una venta
    PROCEDURE MODIFICAR_VENTA(
        ID_IN NUMBER,
        MONTO_IN NUMBER,
        PRODUCTOS_IN VARCHAR2,
        PAGO_IN VARCHAR2,
        COMPRADOR_IN VARCHAR2,
        VENDEDOR_IN VARCHAR2,
        CANTIDADES_IN NUMBER
    ) IS
    BEGIN
        UPDATE TLM.VENTAS
        SET MONTO = MONTO_IN,
            PRODUCTOS = PRODUCTOS_IN,
            PAGO = PAGO_IN,
            COMPRADOR = COMPRADOR_IN,
            VENDEDOR = VENDEDOR_IN,
            CANTIDADES = CANTIDADES_IN,
            FECHA = SYSDATE
        WHERE ID_VENTA = ID_IN;

        DBMS_OUTPUT.PUT_LINE('Venta actualizada correctamente. ID: ' || ID_IN);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Error: Venta no encontrada.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al actualizar la venta: ' || SQLERRM);
    END MODIFICAR_VENTA;

    -- Eliminar una venta
    PROCEDURE BORRAR_VENTA(
        ID_IN NUMBER
    ) IS
    BEGIN
        DELETE FROM TLM.VENTAS
        WHERE ID_VENTA = ID_IN;

        DBMS_OUTPUT.PUT_LINE('Venta eliminada correctamente. ID: ' || ID_IN);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Error: Venta no encontrada.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al eliminar la venta: ' || SQLERRM);
    END BORRAR_VENTA;

    -- Calcular el monto final de la venta
    FUNCTION CALCULAR_MONTO(
        MONTO_IN NUMBER,
        IMPUESTO_IN NUMBER,
        DESCUENTO_IN NUMBER
    ) RETURN NUMBER IS
    BEGIN
        RETURN (MONTO_IN + (MONTO_IN * IMPUESTO_IN / 100)) - DESCUENTO_IN;
    END CALCULAR_MONTO;
END PKG_VENTAS;

/
--------------------------------------------------------
--  Constraints for Table EMPLEADOS
--------------------------------------------------------

  ALTER TABLE "TLM"."EMPLEADOS" MODIFY ("CEDULA" NOT NULL ENABLE);
  ALTER TABLE "TLM"."EMPLEADOS" ADD PRIMARY KEY ("CEDULA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AUDIT_VENTAS
--------------------------------------------------------

  ALTER TABLE "TLM"."AUDIT_VENTAS" ADD CONSTRAINT "AUDIT_VENTAS_PK" PRIMARY KEY ("LOG_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRODUCTOS
--------------------------------------------------------

  ALTER TABLE "TLM"."PRODUCTOS" MODIFY ("CODIGO" NOT NULL ENABLE);
  ALTER TABLE "TLM"."PRODUCTOS" ADD PRIMARY KEY ("CODIGO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AUDIT_CLIENTES
--------------------------------------------------------

  ALTER TABLE "TLM"."AUDIT_CLIENTES" ADD CONSTRAINT "AUDIT_CLIENTES_PK" PRIMARY KEY ("LOG_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AUDIT_EMPLEADOS
--------------------------------------------------------

  ALTER TABLE "TLM"."AUDIT_EMPLEADOS" ADD CONSTRAINT "AUDIT_EMPLEADOS_PK" PRIMARY KEY ("LOG_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AUDIT_PROVEEDORES
--------------------------------------------------------

  ALTER TABLE "TLM"."AUDIT_PROVEEDORES" ADD CONSTRAINT "AUDIT_PROVEEDORES_PK" PRIMARY KEY ("LOG_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CLIENTES
--------------------------------------------------------

  ALTER TABLE "TLM"."CLIENTES" MODIFY ("CEDULA" NOT NULL ENABLE);
  ALTER TABLE "TLM"."CLIENTES" ADD CONSTRAINT "CLIENTES_PK" PRIMARY KEY ("CEDULA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AUDIT_PRODUCTOS
--------------------------------------------------------

  ALTER TABLE "TLM"."AUDIT_PRODUCTOS" ADD CONSTRAINT "AUDIT_PRODUCTOS_PK" PRIMARY KEY ("LOG_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PROVEEDORES
--------------------------------------------------------

  ALTER TABLE "TLM"."PROVEEDORES" MODIFY ("CEDULA" NOT NULL ENABLE);
  ALTER TABLE "TLM"."PROVEEDORES" ADD CONSTRAINT "PROVEEDORES_PK" PRIMARY KEY ("CEDULA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table VENTAS
--------------------------------------------------------

  ALTER TABLE "TLM"."VENTAS" MODIFY ("ID_VENTA" NOT NULL ENABLE);
  ALTER TABLE "TLM"."VENTAS" ADD CONSTRAINT "VENTAS_PK" PRIMARY KEY ("ID_VENTA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table VENTAS
--------------------------------------------------------

  ALTER TABLE "TLM"."VENTAS" ADD CONSTRAINT "COMPRADOR_FK" FOREIGN KEY ("COMPRADOR")
	  REFERENCES "TLM"."CLIENTES" ("CEDULA") ENABLE;
  ALTER TABLE "TLM"."VENTAS" ADD CONSTRAINT "VENDEDOR_FK" FOREIGN KEY ("VENDEDOR")
	  REFERENCES "TLM"."EMPLEADOS" ("CEDULA") ENABLE;
