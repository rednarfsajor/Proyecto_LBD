--ESQUEMA TLM

CREATE USER TLM IDENTIFIED BY TLM;
ALTER USER TLM QUOTA UNLIMITED ON USERS;
GRANT DBA, CREATE SESSION TO TLM;
CONNECT TLM/TLM;

SET SERVEROUTPUT ON;



-- TABLA CLIENTES
CREATE TABLE TLM.CLIENTES(
        CEDULA VARCHAR2(9) NOT NULL CONSTRAINT CLIENTES_PK PRIMARY KEY,
        NOMBRE VARCHAR2(30),
        PRIMER_APELLIDO VARCHAR2(20),
        SEGUNDO_APELLIDO VARCHAR2(20),
        TIPO VARCHAR2(20),
        TELEFONO VARCHAR2(11),
        DIRECCION VARCHAR2(100),
        CORREO VARCHAR2(30)
)

SELECT * FROM TLM.CLIENTES;

-- TABLA PROVEEDORES
CREATE TABLE TLM.PROVEEDORES(
        CEDULA VARCHAR2(9) NOT NULL CONSTRAINT PROVEEDORES_PK PRIMARY KEY,
        NOMBRE VARCHAR2(30),
        TIPO VARCHAR2(20),
        TELEFONO VARCHAR2(11),
        DIRECCION VARCHAR2(100),
        CORREO VARCHAR2(30),
        PRODUCTOS NUMBER
)
SELECT * FROM TLM.PROVEEDORES;

CREATE TABLE TLM.VENTAS (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT VENTAS_PK PRIMARY KEY,
    MONTO NUMBER,
    PRODUCTOS VARCHAR2(50),
    PAGO VARCHAR2(25),
    COMPRADOR VARCHAR2(20) CONSTRAINT COMPRADOR_FK REFERENCES TLM.CLIENTES(CEDULA),
    VENDEDOR VARCHAR2(20) CONSTRAINT VENDEDOR_FK REFERENCES TLM.PROVEEDORES(CEDULA),
    FECHA DATE,
    CANTIDADES NUMBER
);

SELECT * FROM TLM.VENTAS;

-- TABLA EMPLEADOS
CREATE TABLE TLM.EMPLEADOS (
    CEDULA INT PRIMARY KEY NOT NULL,
    NOMBRE VARCHAR2(50),
    TIPO VARCHAR2(20),
    TELEFONO VARCHAR2(15),
    DIRECCION CLOB,
    CORREO VARCHAR2(50),
    PUESTO VARCHAR2(50),
    SALARIO INT,
    USERNAME VARCHAR2(30),
    PASSWORD VARCHAR2(30)
);
SELECT * FROM TLM.EMPLEADOS;
-- TABLA PRODUCTOS
CREATE TABLE TLM.PRODUCTOS (
    CODIGO INT PRIMARY KEY NOT NULL,
    NOMBRE VARCHAR2(50),
    DESCRIPCION CLOB,
    CANTIDAD INT,
    PRECIO INT
);
SELECT * FROM TLM.PRODUCTOS;


INSERT INTO TLM.PROVEEDORES (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PRODUCTOS)
VALUES ('117880731', 'Proveedor1', 'General', '1234567890', 'Heredia Centro', 'provedor1@ejemplo.com', 10);

INSERT INTO TLM.PROVEEDORES (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PRODUCTOS)
VALUES ('100000001', 'Proveedor1', 'General', '77771111', 'San José', 'proveedor1@mail.com', 10);

INSERT INTO TLM.PROVEEDORES (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PRODUCTOS)
VALUES ('100000002', 'Proveedor2', 'Mayorista', '77771112', 'Cartago', 'proveedor2@mail.com', 20);

INSERT INTO TLM.PROVEEDORES (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PRODUCTOS)
VALUES ('100000003', 'Proveedor3', 'Distribuidor', '77771113', 'Heredia', 'proveedor3@mail.com', 15);

INSERT INTO TLM.PROVEEDORES (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PRODUCTOS)
VALUES ('100000004', 'Proveedor4', 'General', '77771114', 'Alajuela', 'proveedor4@mail.com', 25);

INSERT INTO TLM.PROVEEDORES (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PRODUCTOS)
VALUES ('100000005', 'Proveedor5', 'Mayorista', '77771115', 'Limón', 'proveedor5@mail.com', 30);

INSERT INTO TLM.PROVEEDORES (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PRODUCTOS)
VALUES ('100000006', 'Proveedor6', 'Distribuidor', '77771116', 'Puntarenas', 'proveedor6@mail.com', 40);

INSERT INTO TLM.PROVEEDORES (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PRODUCTOS)
VALUES ('100000007', 'Proveedor7', 'General', '77771117', 'Guanacaste', 'proveedor7@mail.com', 12);

INSERT INTO TLM.PROVEEDORES (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PRODUCTOS)
VALUES ('100000008', 'Proveedor8', 'Mayorista', '77771118', 'Perez Zeledón', 'proveedor8@mail.com', 50);

INSERT INTO TLM.PROVEEDORES (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PRODUCTOS)
VALUES ('100000009', 'Proveedor9', 'Distribuidor', '77771119', 'Ciudad Quesada', 'proveedor9@mail.com', 22);

INSERT INTO TLM.PROVEEDORES (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PRODUCTOS)
VALUES ('100000010', 'Proveedor10', 'General', '77771110', 'San Carlos', 'proveedor10@mail.com', 18);


INSERT INTO TLM.CLIENTES (CEDULA, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, TIPO, TELEFONO, DIRECCION, CORREO)
VALUES ('111111111', 'Juan', 'Pérez', 'López', 'Regular', '88885555', 'San José', 'juan.perez@mail.com');

INSERT INTO TLM.CLIENTES (CEDULA, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, TIPO, TELEFONO, DIRECCION, CORREO)
VALUES ('222222222', 'Ana', 'Gómez', 'Martínez', 'VIP', '88885556', 'Cartago', 'ana.gomez@mail.com');

INSERT INTO TLM.CLIENTES (CEDULA, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, TIPO, TELEFONO, DIRECCION, CORREO)
VALUES ('333333333', 'Carlos', 'Rodríguez', 'Morales', 'Regular', '88885557', 'Heredia', 'carlos.rodriguez@mail.com');

INSERT INTO TLM.CLIENTES (CEDULA, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, TIPO, TELEFONO, DIRECCION, CORREO)
VALUES ('444444444', 'Lucía', 'Ramírez', 'Castro', 'VIP', '88885558', 'Alajuela', 'lucia.ramirez@mail.com');

INSERT INTO TLM.CLIENTES (CEDULA, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, TIPO, TELEFONO, DIRECCION, CORREO)
VALUES ('555555555', 'Pedro', 'Villalobos', 'Jiménez', 'Regular', '88885559', 'Puntarenas', 'pedro.villalobos@mail.com');

INSERT INTO TLM.CLIENTES (CEDULA, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, TIPO, TELEFONO, DIRECCION, CORREO)
VALUES ('666666666', 'María', 'Fernández', 'Vargas', 'VIP', '88885560', 'Guanacaste', 'maria.fernandez@mail.com');

INSERT INTO TLM.CLIENTES (CEDULA, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, TIPO, TELEFONO, DIRECCION, CORREO)
VALUES ('777777777', 'Luis', 'Cordero', 'Mora', 'Regular', '88885561', 'Limón', 'luis.cordero@mail.com');

INSERT INTO TLM.CLIENTES (CEDULA, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, TIPO, TELEFONO, DIRECCION, CORREO)
VALUES ('888888888', 'Elena', 'Solano', 'Quesada', 'VIP', '88885562', 'Perez Zeledón', 'elena.solano@mail.com');

INSERT INTO TLM.CLIENTES (CEDULA, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, TIPO, TELEFONO, DIRECCION, CORREO)
VALUES ('999999999', 'Jorge', 'Rojas', 'Chacón', 'Regular', '88885563', 'Ciudad Quesada', 'jorge.rojas@mail.com');

INSERT INTO TLM.CLIENTES (CEDULA, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, TIPO, TELEFONO, DIRECCION, CORREO)
VALUES ('000000001', 'Karla', 'Arias', 'Muñoz', 'VIP', '88885564', 'San Carlos', 'karla.arias@mail.com');


INSERT INTO TLM.VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
VALUES (45, 'TEST', 'TARJETA', '117880731', '117880731', SYSDATE, 3);

INSERT INTO TLM.VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
VALUES (10000, 'Jeans', 'Tarjeta', '111111111', '100000001', SYSDATE, 5);

INSERT INTO TLM.VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
VALUES (15000, 'Camiseta', 'Efectivo', '222222222', '100000002', SYSDATE, 3);

INSERT INTO TLM.VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
VALUES (12000, 'Zapatos', 'Transferencia', '333333333', '100000003', SYSDATE, 2);

INSERT INTO TLM.VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
VALUES (8000, 'Bolso', 'Efectivo', '444444444', '100000004', SYSDATE, 4);

INSERT INTO TLM.VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
VALUES (30000, 'Laptop', 'Tarjeta', '555555555', '100000005', SYSDATE, 1);

INSERT INTO TLM.VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
VALUES (25000, 'Perfume', 'Transferencia', '666666666', '100000006', SYSDATE, 2);

INSERT INTO TLM.VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
VALUES (15000, 'Cinturón', 'Efectivo', '777777777', '100000007', SYSDATE, 3);

INSERT INTO TLM.VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
VALUES (10000, 'Anillo', 'Tarjeta', '888888888', '100000008', SYSDATE, 2);

INSERT INTO TLM.VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
VALUES (5000, 'Sombrero', 'Efectivo', '999999999', '100000009', SYSDATE, 6);

INSERT INTO TLM.VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
VALUES (20000, 'Reloj', 'Transferencia', '000000001', '100000010', SYSDATE, 4);


INSERT INTO TLM.EMPLEADOS (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PUESTO, SALARIO, USERNAME, PASSWORD)
VALUES (123456789, 'María González', 'Tiempo completo', '9876543210', 'Avenida Central, San José', 'mgonzalez@empresa.com', 'Gerente', 1500000, 'maria.gonzalez', 'password123');

INSERT INTO TLM.EMPLEADOS (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PUESTO, SALARIO, USERNAME, PASSWORD)
VALUES (101, 'María González', 'Tiempo Completo', '88884444', 'San José', 'maria.gonzalez@mail.com', 'Gerente', 1500000, 'maria.g', 'password123');

INSERT INTO TLM.EMPLEADOS (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PUESTO, SALARIO, USERNAME, PASSWORD)
VALUES (102, 'Luis Pérez', 'Medio Tiempo', '88884445', 'Cartago', 'luis.perez@mail.com', 'Asistente', 800000, 'luis.p', 'password123');

INSERT INTO TLM.EMPLEADOS (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PUESTO, SALARIO, USERNAME, PASSWORD)
VALUES (103, 'Ana Ramírez', 'Tiempo Completo', '88884446', 'Heredia', 'ana.ramirez@mail.com', 'Supervisor', 1200000, 'ana.r', 'password456');

INSERT INTO TLM.EMPLEADOS (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PUESTO, SALARIO, USERNAME, PASSWORD)
VALUES (104, 'Carlos Rodríguez', 'Tiempo Completo', '88884447', 'Alajuela', 'carlos.rodriguez@mail.com', 'Administrador', 1300000, 'carlos.r', 'password789');

INSERT INTO TLM.EMPLEADOS (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PUESTO, SALARIO, USERNAME, PASSWORD)
VALUES (105, 'Lucía Villalobos', 'Medio Tiempo', '88884448', 'Puntarenas', 'lucia.villalobos@mail.com', 'Recepcionista', 600000, 'lucia.v', 'password321');

INSERT INTO TLM.EMPLEADOS (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PUESTO, SALARIO, USERNAME, PASSWORD)
VALUES (106, 'Pedro Ramírez', 'Tiempo Completo', '88884449', 'Guanacaste', 'pedro.ramirez@mail.com', 'Jefe de Ventas', 1400000, 'pedro.r', 'password987');

INSERT INTO TLM.EMPLEADOS (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PUESTO, SALARIO, USERNAME, PASSWORD)
VALUES (107, 'Karla Solano', 'Tiempo Completo', '88884450', 'Perez Zeledón', 'karla.solano@mail.com', 'Contadora', 1350000, 'karla.s', 'password654');

INSERT INTO TLM.EMPLEADOS (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PUESTO, SALARIO, USERNAME, PASSWORD)
VALUES (108, 'Elena Quesada', 'Medio Tiempo', '88884451', 'Ciudad Quesada', 'elena.quesada@mail.com', 'Analista', 850000, 'elena.q', 'password321');

INSERT INTO TLM.EMPLEADOS (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PUESTO, SALARIO, USERNAME, PASSWORD)
VALUES (109, 'Jorge Arias', 'Tiempo Completo', '88884452', 'San Carlos', 'jorge.arias@mail.com', 'Ingeniero', 1500000, 'jorge.a', 'password111');

INSERT INTO TLM.EMPLEADOS (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PUESTO, SALARIO, USERNAME, PASSWORD)
VALUES (110, 'Sofía Chacón', 'Medio Tiempo', '88884453', 'Heredia', 'sofia.chacon@mail.com', 'Diseñadora', 700000, 'sofia.c', 'password222');


INSERT INTO TLM.PRODUCTOS (CODIGO, NOMBRE, DESCRIPCION, CANTIDAD, PRECIO)
VALUES (101, 'Jeans', 'Color gris', 50, 7500);

INSERT INTO TLM.PRODUCTOS (CODIGO, NOMBRE, DESCRIPCION, CANTIDAD, PRECIO)
VALUES (102, 'Camiseta', 'Camiseta blanca 100% algodón', 100, 5000);

INSERT INTO TLM.PRODUCTOS (CODIGO, NOMBRE, DESCRIPCION, CANTIDAD, PRECIO)
VALUES (103, 'Zapatos', 'Zapatos deportivos de alta calidad', 30, 25000);

INSERT INTO TLM.PRODUCTOS (CODIGO, NOMBRE, DESCRIPCION, CANTIDAD, PRECIO)
VALUES (104, 'Sombrero', 'Sombrero de paja con ala ancha', 25, 8500);

INSERT INTO TLM.PRODUCTOS (CODIGO, NOMBRE, DESCRIPCION, CANTIDAD, PRECIO)
VALUES (105, 'Bolso', 'Bolso de cuero negro', 20, 45000);

INSERT INTO TLM.PRODUCTOS (CODIGO, NOMBRE, DESCRIPCION, CANTIDAD, PRECIO)
VALUES (106, 'Cinturón', 'Cinturón de cuero ajustable', 50, 12000);

INSERT INTO TLM.PRODUCTOS (CODIGO, NOMBRE, DESCRIPCION, CANTIDAD, PRECIO)
VALUES (107, 'Perfume', 'Perfume de larga duración', 40, 30000);

INSERT INTO TLM.PRODUCTOS (CODIGO, NOMBRE, DESCRIPCION, CANTIDAD, PRECIO)
VALUES (108, 'Anillo', 'Anillo de plata con diseño único', 10, 20000);

INSERT INTO TLM.PRODUCTOS (CODIGO, NOMBRE, DESCRIPCION, CANTIDAD, PRECIO)
VALUES (109, 'Reloj', 'Reloj de pulsera digital resistente al agua', 15, 35000);




----------- PROCEDIMIENTOS -----------


------------------------ PROVEEDORES -------------------------------------------

---- CREAR ---- 

CREATE OR REPLACE PROCEDURE CREAR_PROVEEDOR(
    CEDULA_IN IN VARCHAR2,
    NOMBRE_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN VARCHAR2,
    CORREO_IN IN VARCHAR2,
    PRODUCTOS_IN IN NUMBER
) AS
BEGIN
    INSERT INTO TLM.PROVEEDORES (
        CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PRODUCTOS
    )
    VALUES (
        CEDULA_IN, NOMBRE_IN, TIPO_IN, TELEFONO_IN, DIRECCION_IN, CORREO_IN, PRODUCTOS_IN
    );

    DBMS_OUTPUT.PUT_LINE('Proveedor creado correctamente: ' || CEDULA_IN);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Error: El proveedor con cédula ' || CEDULA_IN || ' ya existe.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al crear proveedor: ' || SQLERRM);
END;


BEGIN
    CREAR_PROVEEDOR(
        CEDULA_IN => '123456789',
        NOMBRE_IN => 'Proveedor A',
        TIPO_IN => 'Mayorista',
        TELEFONO_IN => '88885555',
        DIRECCION_IN => 'San José, Costa Rica',
        CORREO_IN => 'proveedor_a@mail.com',
        PRODUCTOS_IN => 50
    );
END;

---- LEER ----
CREATE OR REPLACE PROCEDURE LEER_PROVEEDORES(
    CRITERIO_IN VARCHAR2 DEFAULT NULL
) AS
    CURSOR_PROVEEDORES SYS_REFCURSOR;
    PROVEEDOR_ROW TLM.PROVEEDORES%ROWTYPE;
BEGIN
    IF CRITERIO_IN IS NULL THEN
        OPEN CURSOR_PROVEEDORES FOR
        SELECT * FROM TLM.PROVEEDORES;
    ELSE
        OPEN CURSOR_PROVEEDORES FOR
        SELECT * FROM TLM.PROVEEDORES WHERE NOMBRE LIKE '%' || CRITERIO_IN || '%';
    END IF;

    LOOP
        FETCH CURSOR_PROVEEDORES INTO PROVEEDOR_ROW;
        EXIT WHEN CURSOR_PROVEEDORES%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE(
            'Cédula: ' || PROVEEDOR_ROW.CEDULA ||
            ', Nombre: ' || PROVEEDOR_ROW.NOMBRE ||
            ', Tipo: ' || PROVEEDOR_ROW.TIPO ||
            ', Teléfono: ' || PROVEEDOR_ROW.TELEFONO ||
            ', Dirección: ' || PROVEEDOR_ROW.DIRECCION ||
            ', Productos: ' || PROVEEDOR_ROW.PRODUCTOS
        );
    END LOOP;

    CLOSE CURSOR_PROVEEDORES;
END;

BEGIN
    LEER_PROVEEDORES(); -- Lee todos los proveedores
END;

BEGIN
    LEER_PROVEEDORES(CRITERIO_IN => 'Proveedor A'); -- Lee proveedores que coincidan con el criterio
END;


---- ACTUALIZAR ----


CREATE OR REPLACE PROCEDURE ACTUALIZAR_PROVEEDOR(
    CEDULA_IN IN VARCHAR2,
    NOMBRE_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN VARCHAR2,
    CORREO_IN IN VARCHAR2,
    PRODUCTOS_IN IN NUMBER
) AS
BEGIN
    UPDATE TLM.PROVEEDORES
    SET NOMBRE = NOMBRE_IN,
        TIPO = TIPO_IN,
        TELEFONO = TELEFONO_IN,
        DIRECCION = DIRECCION_IN,
        CORREO = CORREO_IN,
        PRODUCTOS = PRODUCTOS_IN
    WHERE CEDULA = CEDULA_IN;

    DBMS_OUTPUT.PUT_LINE('Proveedor actualizado correctamente: ' || CEDULA_IN);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: El proveedor con cédula ' || CEDULA_IN || ' no existe.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al actualizar proveedor: ' || SQLERRM);
END;


BEGIN
    ACTUALIZAR_PROVEEDOR(
        CEDULA_IN => '123456789',
        NOMBRE_IN => 'Proveedor Actualizado',
        TIPO_IN => 'Distribuidor',
        TELEFONO_IN => '88889999',
        DIRECCION_IN => 'Heredia, Costa Rica',
        CORREO_IN => 'proveedor_actualizado@mail.com',
        PRODUCTOS_IN => 100
    );
END;


---- ELIMINAR ---- 

CREATE OR REPLACE PROCEDURE ELIMINAR_PROVEEDOR(
    CEDULA_IN IN VARCHAR2
) AS
    V_COUNT NUMBER;
BEGIN
    -- Verificar si el registro existe
    SELECT COUNT(*) INTO V_COUNT 
    FROM TLM.PROVEEDORES
    WHERE CEDULA = CEDULA_IN;

    IF V_COUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Error: El proveedor con cédula ' || CEDULA_IN || ' no existe.');
    ELSE
        -- Eliminar el registro
        DELETE FROM TLM.PROVEEDORES
        WHERE CEDULA = CEDULA_IN;

        DBMS_OUTPUT.PUT_LINE('Proveedor eliminado correctamente: ' || CEDULA_IN);
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al eliminar proveedor: ' || SQLERRM);
END;



BEGIN
    ELIMINAR_PROVEEDOR(CEDULA_IN => '98745623');
END;


------------------------ CREAR EMPLEADO ------------------------
CREATE OR REPLACE PROCEDURE CREAR_EMPLEADO(
    CEDULA_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN CLOB,
    CORREO_IN IN VARCHAR2,
    PUESTO_IN IN VARCHAR2,
    SALARIO_IN IN INT,
    USERNAME_IN IN VARCHAR2,
    PASSWORD_IN IN VARCHAR2
) AS
BEGIN
    INSERT INTO TLM.EMPLEADOS (
        CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PUESTO, SALARIO, USERNAME, PASSWORD
    )
    VALUES (
        CEDULA_IN, NOMBRE_IN, TIPO_IN, TELEFONO_IN, DIRECCION_IN, CORREO_IN, PUESTO_IN, SALARIO_IN, USERNAME_IN, PASSWORD_IN
    );

    DBMS_OUTPUT.PUT_LINE('Empleado creado correctamente: ' || CEDULA_IN);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Error: El empleado con cédula ' || CEDULA_IN || ' ya existe.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al crear empleado: ' || SQLERRM);
END;

BEGIN
    CREAR_EMPLEADO(
        CEDULA_IN => 123456789,
        NOMBRE_IN => 'Juan Pérez',
        TIPO_IN => 'Tiempo Completo',
        TELEFONO_IN => '88885555',
        DIRECCION_IN => 'San José, Costa Rica',
        CORREO_IN => 'juan.perez@mail.com',
        PUESTO_IN => 'Gerente',
        SALARIO_IN => 2000,
        USERNAME_IN => 'juanp',
        PASSWORD_IN => 'password123'
    );
END;


------------------------ LEER EMPLEADO ------------------------
CREATE OR REPLACE PROCEDURE LEER_EMPLEADOS(
    CRITERIO_IN VARCHAR2 DEFAULT NULL
) AS
    CURSOR_EMPLEADOS SYS_REFCURSOR;
    EMPLEADO_ROW TLM.EMPLEADOS%ROWTYPE;
BEGIN
    IF CRITERIO_IN IS NULL THEN
        OPEN CURSOR_EMPLEADOS FOR
        SELECT * FROM TLM.EMPLEADOS;
    ELSE
        OPEN CURSOR_EMPLEADOS FOR
        SELECT * FROM TLM.EMPLEADOS WHERE NOMBRE LIKE '%' || CRITERIO_IN || '%';
    END IF;

    LOOP
        FETCH CURSOR_EMPLEADOS INTO EMPLEADO_ROW;
        EXIT WHEN CURSOR_EMPLEADOS%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE(
            'Cédula: ' || EMPLEADO_ROW.CEDULA ||
            ', Nombre: ' || EMPLEADO_ROW.NOMBRE ||
            ', Tipo: ' || EMPLEADO_ROW.TIPO ||
            ', Teléfono: ' || EMPLEADO_ROW.TELEFONO ||
            ', Puesto: ' || EMPLEADO_ROW.PUESTO ||
            ', Salario: ' || EMPLEADO_ROW.SALARIO
        );
    END LOOP;

    CLOSE CURSOR_EMPLEADOS;
END;

BEGIN
    LEER_EMPLEADOS(); -- Lee todos los empleados
END;

BEGIN
    LEER_EMPLEADOS(CRITERIO_IN => 'Karla Solano'); -- Lee empleados que coincidan con el criterio
END;

------------------------ ACTUALIZAR EMPLEADO ------------------------
CREATE OR REPLACE PROCEDURE ACTUALIZAR_EMPLEADO(
    CEDULA_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN CLOB,
    CORREO_IN IN VARCHAR2,
    PUESTO_IN IN VARCHAR2,
    SALARIO_IN IN INT,
    USERNAME_IN IN VARCHAR2,
    PASSWORD_IN IN VARCHAR2
) AS
BEGIN
    UPDATE TLM.EMPLEADOS
    SET NOMBRE = NOMBRE_IN,
        TIPO = TIPO_IN,
        TELEFONO = TELEFONO_IN,
        DIRECCION = DIRECCION_IN,
        CORREO = CORREO_IN,
        PUESTO = PUESTO_IN,
        SALARIO = SALARIO_IN,
        USERNAME = USERNAME_IN,
        PASSWORD = PASSWORD_IN
    WHERE CEDULA = CEDULA_IN;

    DBMS_OUTPUT.PUT_LINE('Empleado actualizado correctamente: ' || CEDULA_IN);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: El empleado con cédula ' || CEDULA_IN || ' no existe.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al actualizar empleado: ' || SQLERRM);
END;

    
BEGIN
    ACTUALIZAR_EMPLEADO(
        CEDULA_IN => 123456789,
        NOMBRE_IN => 'Juan Pérez Actualizado',
        TIPO_IN => 'Medio Tiempo',
        TELEFONO_IN => '99998888',
        DIRECCION_IN => 'Heredia, Costa Rica',
        CORREO_IN => 'juan.perez.updated@mail.com',
        PUESTO_IN => 'Supervisor',
        SALARIO_IN => 1800,
        USERNAME_IN => 'juanp',
        PASSWORD_IN => 'newpassword123'
    );
END;


------------------------ ELIMINAR EMPLEADO ------------------------
CREATE OR REPLACE PROCEDURE ELIMINAR_EMPLEADO(
    CEDULA_IN IN INT
) AS
    V_COUNT NUMBER;
BEGIN
    -- Verificar si el registro existe
    SELECT COUNT(*) INTO V_COUNT
    FROM TLM.EMPLEADOS
    WHERE CEDULA = CEDULA_IN;

    IF V_COUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Error: El empleado con cédula ' || CEDULA_IN || ' no existe.');
    ELSE
        -- Eliminar el registro
        DELETE FROM TLM.EMPLEADOS
        WHERE CEDULA = CEDULA_IN;

        DBMS_OUTPUT.PUT_LINE('Empleado eliminado correctamente: ' || CEDULA_IN);
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al eliminar empleado: ' || SQLERRM);
END;


BEGIN
    ELIMINAR_EMPLEADO(CEDULA_IN => 123456789);
END;

------------------------ INSERTAR PRODUCTO ------------------------

CREATE OR REPLACE PROCEDURE CREAR_PRODUCTO(
    CODIGO_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    DESCRIPCION_IN IN CLOB,
    CANTIDAD_IN IN INT,
    PRECIO_IN IN INT
) AS
BEGIN
    INSERT INTO TLM.PRODUCTOS (
        CODIGO, NOMBRE, DESCRIPCION, CANTIDAD, PRECIO
    )
    VALUES (
        CODIGO_IN, NOMBRE_IN, DESCRIPCION_IN, CANTIDAD_IN, PRECIO_IN
    );

    DBMS_OUTPUT.PUT_LINE('Producto creado correctamente: ' || NOMBRE_IN);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Error: El producto con código ' || CODIGO_IN || ' ya existe.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al crear producto: ' || SQLERRM);
END;

BEGIN
    CREAR_PRODUCTO(
        CODIGO_IN => 101,
        NOMBRE_IN => 'Camiseta',
        DESCRIPCION_IN => 'Camiseta de algodón 100% color blanco.',
        CANTIDAD_IN => 50,
        PRECIO_IN => 2000
    );
END;


------------------------ LEER PRODUCTO ------------------------

CREATE OR REPLACE PROCEDURE LEER_PRODUCTOS(
    CRITERIO_IN VARCHAR2 DEFAULT NULL
) AS
    CURSOR_PRODUCTOS SYS_REFCURSOR;
    PRODUCTO_ROW TLM.PRODUCTOS%ROWTYPE;
BEGIN
    IF CRITERIO_IN IS NULL THEN
        OPEN CURSOR_PRODUCTOS FOR
        SELECT * FROM TLM.PRODUCTOS;
    ELSE
        OPEN CURSOR_PRODUCTOS FOR
        SELECT * FROM TLM.PRODUCTOS WHERE NOMBRE LIKE '%' || CRITERIO_IN || '%';
    END IF;

    LOOP
        FETCH CURSOR_PRODUCTOS INTO PRODUCTO_ROW;
        EXIT WHEN CURSOR_PRODUCTOS%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE(
            'Código: ' || PRODUCTO_ROW.CODIGO ||
            ', Nombre: ' || PRODUCTO_ROW.NOMBRE ||
            ', Descripción: ' || PRODUCTO_ROW.DESCRIPCION ||
            ', Cantidad: ' || PRODUCTO_ROW.CANTIDAD ||
            ', Precio: ' || PRODUCTO_ROW.PRECIO
        );
    END LOOP;

    CLOSE CURSOR_PRODUCTOS;
END;

BEGIN
    LEER_PRODUCTOS(); -- Lee todos los productos
END;

BEGIN
    LEER_PRODUCTOS(CRITERIO_IN => 'Anillo'); -- Lee productos que coincidan con el criterio
END;


------------------------ ACTUALIZAR PRODUCTO ------------------------
CREATE OR REPLACE PROCEDURE ACTUALIZAR_PRODUCTO(
    CODIGO_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    DESCRIPCION_IN IN CLOB,
    CANTIDAD_IN IN INT,
    PRECIO_IN IN INT
) AS
BEGIN
    UPDATE TLM.PRODUCTOS
    SET NOMBRE = NOMBRE_IN,
        DESCRIPCION = DESCRIPCION_IN,
        CANTIDAD = CANTIDAD_IN,
        PRECIO = PRECIO_IN
    WHERE CODIGO = CODIGO_IN;

    DBMS_OUTPUT.PUT_LINE('Producto actualizado correctamente: ' || NOMBRE_IN);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: El producto con código ' || CODIGO_IN || ' no existe.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al actualizar producto: ' || SQLERRM);
END;

    
BEGIN
    ACTUALIZAR_PRODUCTO(
        CODIGO_IN => 101,
        NOMBRE_IN => 'Camiseta de Algodón',
        DESCRIPCION_IN => 'Camiseta de algodón premium color azul.',
        CANTIDAD_IN => 60,
        PRECIO_IN => 2500
    );
END;


------------------------ ELIMINAR PRODUCTO ------------------------
CREATE OR REPLACE PROCEDURE ELIMINAR_PRODUCTO(
    CODIGO_IN IN INT
) AS
    V_COUNT NUMBER;
BEGIN
    -- Verificar si el registro existe
    SELECT COUNT(*) INTO V_COUNT
    FROM TLM.PRODUCTOS
    WHERE CODIGO = CODIGO_IN;

    IF V_COUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Error: El producto con código ' || CODIGO_IN || ' no existe.');
    ELSE
        -- Eliminar el registro
        DELETE FROM TLM.PRODUCTOS
        WHERE CODIGO = CODIGO_IN;

        DBMS_OUTPUT.PUT_LINE('Producto eliminado correctamente: Código ' || CODIGO_IN);
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al eliminar producto: ' || SQLERRM);
END;

BEGIN
    ELIMINAR_PRODUCTO(CODIGO_IN => 101);
END;

---------------------------------------------------------------------------------------

----- VENTAS ------


----------- CREAR --------------
CREATE OR REPLACE PROCEDURE REGISTRAR_VENTA(
    MONTO_IN NUMBER,
    PRODUCTOS_IN VARCHAR2,
    PAGO_IN VARCHAR2,
    COMPRADOR_IN VARCHAR2,
    VENDEDOR_IN VARCHAR2,
    CANTIDADES_IN NUMBER
) AS
    EXISTENCIAS INT;
BEGIN
    -- Verifica si el producto existe y tiene suficientes existencias
    SELECT CANTIDAD INTO EXISTENCIAS 
    FROM TLM.PRODUCTOS 
    WHERE NOMBRE = PRODUCTOS_IN;

    IF EXISTENCIAS < CANTIDADES_IN THEN
        RAISE_APPLICATION_ERROR(-20001, 'Error: No hay suficientes existencias para la venta.');
    END IF;

    -- Inserta la venta en TLM.VENTAS
    INSERT INTO TLM.VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
    VALUES (MONTO_IN, PRODUCTOS_IN, PAGO_IN, COMPRADOR_IN, VENDEDOR_IN, SYSDATE, CANTIDADES_IN);

    -- Actualiza el inventario de TLM.PRODUCTOS
    UPDATE TLM.PRODUCTOS 
    SET CANTIDAD = CANTIDAD - CANTIDADES_IN 
    WHERE NOMBRE = PRODUCTOS_IN;

    DBMS_OUTPUT.PUT_LINE('Venta registrada correctamente.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: Producto no encontrado.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al registrar la venta: ' || SQLERRM);
END;

BEGIN
    REGISTRAR_VENTA(
        MONTO_IN => 15000,
        PRODUCTOS_IN => 'Jeans',
        PAGO_IN => 'Tarjeta',
        COMPRADOR_IN => '117880731',
        VENDEDOR_IN => '117880731',
        CANTIDADES_IN => 3
    );
END;


SELECT * FROM TLM.VENTAS;
SELECT * FROM TLM.PRODUCTOS;


----------- LEER --------------
CREATE OR REPLACE PROCEDURE LEER_VENTAS(
    CRITERIO_IN VARCHAR2 DEFAULT NULL
) AS
    CURSOR_VENTAS SYS_REFCURSOR;
    VENTA_ROW TLM.VENTAS%ROWTYPE;
BEGIN
    IF CRITERIO_IN IS NULL THEN
        OPEN CURSOR_VENTAS FOR
        SELECT * FROM TLM.VENTAS;
    ELSE
        OPEN CURSOR_VENTAS FOR
        SELECT * FROM TLM.VENTAS WHERE COMPRADOR LIKE '%' || CRITERIO_IN || '%';
    END IF;

    LOOP
        FETCH CURSOR_VENTAS INTO VENTA_ROW;
        EXIT WHEN CURSOR_VENTAS%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE(
            'Venta ID: ' || VENTA_ROW.ID || 
            ', Monto: ' || VENTA_ROW.MONTO ||
            ', Producto: ' || VENTA_ROW.PRODUCTOS ||
            ', Comprador: ' || VENTA_ROW.COMPRADOR ||
            ', Fecha: ' || VENTA_ROW.FECHA
        );
    END LOOP;

    CLOSE CURSOR_VENTAS;
END;

BEGIN
    LEER_VENTAS(CRITERIO_IN => '117880731'); -- Lee ventas para un comprador específico
END;

BEGIN
    LEER_VENTAS(); -- Lee todas las ventas
END;

----------- ACTUALIZAR --------------

CREATE OR REPLACE PROCEDURE ACTUALIZAR_VENTA(
    ID_IN NUMBER,
    MONTO_IN NUMBER,
    PRODUCTOS_IN VARCHAR2,
    PAGO_IN VARCHAR2,
    COMPRADOR_IN VARCHAR2,
    VENDEDOR_IN VARCHAR2,
    CANTIDADES_IN NUMBER
) AS
BEGIN
    -- Actualiza la venta
    UPDATE TLM.VENTAS
    SET MONTO = MONTO_IN,
        PRODUCTOS = PRODUCTOS_IN,
        PAGO = PAGO_IN,
        COMPRADOR = COMPRADOR_IN,
        VENDEDOR = VENDEDOR_IN,
        CANTIDADES = CANTIDADES_IN,
        FECHA = SYSDATE
    WHERE ID = ID_IN;

    DBMS_OUTPUT.PUT_LINE('Venta actualizada correctamente. ID: ' || ID_IN);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: Venta no encontrada.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al actualizar la venta: ' || SQLERRM);
END;

BEGIN
    ACTUALIZAR_VENTA(
        ID_IN => 1,
        MONTO_IN => 18000,
        PRODUCTOS_IN => 'Camiseta',
        PAGO_IN => 'Efectivo',
        COMPRADOR_IN => '117880731',
        VENDEDOR_IN => '117880731',
        CANTIDADES_IN => 2
    );
END;

----------- ELIMINAR --------------
CREATE OR REPLACE PROCEDURE ELIMINAR_VENTA(
    ID_IN NUMBER
) AS
    V_COUNT NUMBER;
BEGIN
    -- Verificar si el registro existe
    SELECT COUNT(*) INTO V_COUNT
    FROM TLM.VENTAS
    WHERE ID = ID_IN;

    IF V_COUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Error: La venta con ID ' || ID_IN || ' no existe.');
    ELSE
        -- Eliminar el registro
        DELETE FROM TLM.VENTAS
        WHERE ID = ID_IN;

        DBMS_OUTPUT.PUT_LINE('Venta eliminada correctamente. ID: ' || ID_IN);
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al eliminar la venta: ' || SQLERRM);
END;



BEGIN
    ELIMINAR_VENTA(ID_IN => 1); -- Elimina la venta con ID 1
END;


----------- ACTUALIZAR --------------
CREATE OR REPLACE PROCEDURE ACTUALIZAR_INVENTARIO(
    CODIGO_IN INT,
    CANTIDAD_IN INT
) AS
BEGIN
    UPDATE PRODUCTOS
    SET CANTIDAD = CANTIDAD + CANTIDAD_IN
    WHERE CODIGO = CODIGO_IN;

    DBMS_OUTPUT.PUT_LINE('Inventario actualizado correctamente.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: Producto no encontrado.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al actualizar inventario: ' || SQLERRM);
END;

BEGIN
    ACTUALIZAR_INVENTARIO(
        CODIGO_IN => 101,
        CANTIDAD_IN => 5
    );
END;

SELECT * FROM PRODUCTOS WHERE CODIGO = 101;


----

CREATE OR REPLACE PROCEDURE REGISTRAR_CLIENTE(
    CEDULA_IN VARCHAR2,
    NOMBRE_IN VARCHAR2,
    APELLIDO_IN VARCHAR2,
    TELEFONO_IN VARCHAR2,
    CORREO_IN VARCHAR2
) AS
BEGIN
    IF CEDULA_IN IS NULL OR NOMBRE_IN IS NULL OR APELLIDO_IN IS NULL THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error: Datos faltantes para el cliente.');
    END IF;

    -- Inserta cliente
    INSERT INTO CLIENTES (CEDULA, NOMBRE, PRIMER_APELLIDO, TELEFONO, CORREO)
    VALUES (CEDULA_IN, NOMBRE_IN, APELLIDO_IN, TELEFONO_IN, CORREO_IN);

    DBMS_OUTPUT.PUT_LINE('Cliente registrado correctamente.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al registrar cliente: ' || SQLERRM);
END;


BEGIN
    REGISTRAR_CLIENTE(
        CEDULA_IN => '555666222',
        NOMBRE_IN => 'Carlos',
        APELLIDO_IN => 'Ramírez',
        TELEFONO_IN => '88885555',
        CORREO_IN => 'carlos.ramirez@mail.com'
    );
END;

SELECT * FROM CLIENTES WHERE CEDULA = '555666222';


------
FUNCIONES

-----1------

CREATE OR REPLACE FUNCTION CALCULAR_PRECIO_TOTAL(
    PRECIO_IN NUMBER,
    CANTIDAD_IN NUMBER
) RETURN NUMBER IS
BEGIN
    RETURN PRECIO_IN * CANTIDAD_IN;
END;

SELECT CALCULAR_PRECIO_TOTAL(7500, 3) AS PRECIO_TOTAL FROM DUAL;


----2-----
CREATE OR REPLACE FUNCTION PRODUCTOS_AGOTANDOSE(
    LIMITE_IN INT
) RETURN SYS_REFCURSOR IS
    CURSOR_PRODUCTOS SYS_REFCURSOR;
BEGIN
    OPEN CURSOR_PRODUCTOS FOR
    SELECT * FROM PRODUCTOS WHERE CANTIDAD <= LIMITE_IN;
    RETURN CURSOR_PRODUCTOS;
END;

DECLARE
    CURSOR_PRODUCTOS SYS_REFCURSOR;
    PRODUCTO PRODUCTOS%ROWTYPE;
BEGIN
    CURSOR_PRODUCTOS := PRODUCTOS_AGOTANDOSE(10); -- Límite: 10 unidades
    LOOP
        FETCH CURSOR_PRODUCTOS INTO PRODUCTO;
        EXIT WHEN CURSOR_PRODUCTOS%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Producto: ' || PRODUCTO.NOMBRE || ' | Cantidad: ' || PRODUCTO.CANTIDAD);
    END LOOP;
    CLOSE CURSOR_PRODUCTOS;
END;

SELECT CODIGO, NOMBRE, DESCRIPCION, CANTIDAD, PRECIO
FROM TLM.PRODUCTOS
WHERE CANTIDAD <= 10;


------3------
CREATE OR REPLACE FUNCTION CALCULAR_MONTO(
    MONTO_IN NUMBER,
    IMPUESTO_IN NUMBER,
    DESCUENTO_IN NUMBER
) RETURN NUMBER IS
BEGIN
    RETURN (MONTO_IN + (MONTO_IN * IMPUESTO_IN / 100)) - DESCUENTO_IN;
END;

SELECT CALCULAR_MONTO(15000, 13, 1000) AS MONTO_FINAL FROM DUAL;


-------------

Paquetes:


-------PAQUETE VENTAS-------
CREATE OR REPLACE PACKAGE PKG_VENTAS AS
    -- Procedimientos y funciones
    PROCEDURE REGISTRAR_VENTA(
        MONTO_IN NUMBER,
        PRODUCTOS_IN VARCHAR2,
        PAGO_IN VARCHAR2,
        COMPRADOR_IN VARCHAR2,
        VENDEDOR_IN VARCHAR2,
        CANTIDADES_IN NUMBER
    );

    PROCEDURE LEER_VENTAS(
        CRITERIO_IN VARCHAR2 DEFAULT NULL
    );

    PROCEDURE ACTUALIZAR_VENTA(
        ID_IN NUMBER,
        MONTO_IN NUMBER,
        PRODUCTOS_IN VARCHAR2,
        PAGO_IN VARCHAR2,
        COMPRADOR_IN VARCHAR2,
        VENDEDOR_IN VARCHAR2,
        CANTIDADES_IN NUMBER
    );

    PROCEDURE ELIMINAR_VENTA(
        ID_IN NUMBER
    );

    FUNCTION CALCULAR_MONTO(
        MONTO_IN NUMBER,
        IMPUESTO_IN NUMBER,
        DESCUENTO_IN NUMBER
    ) RETURN NUMBER;
END PKG_VENTAS;

CREATE OR REPLACE PACKAGE BODY PKG_VENTAS AS
    -- Crear una venta
    PROCEDURE REGISTRAR_VENTA(
        MONTO_IN NUMBER,
        PRODUCTOS_IN VARCHAR2,
        PAGO_IN VARCHAR2,
        COMPRADOR_IN VARCHAR2,
        VENDEDOR_IN VARCHAR2,
        CANTIDADES_IN NUMBER
    ) IS
        EXISTENCIAS INT;
    BEGIN
        -- Verifica si el producto existe y tiene suficientes existencias
        SELECT CANTIDAD INTO EXISTENCIAS 
        FROM TLM.PRODUCTOS 
        WHERE NOMBRE = PRODUCTOS_IN;

        IF EXISTENCIAS < CANTIDADES_IN THEN
            RAISE_APPLICATION_ERROR(-20001, 'Error: No hay suficientes existencias para la venta.');
        END IF;

        -- Inserta la venta en TLM.VENTAS
        INSERT INTO TLM.VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
        VALUES (MONTO_IN, PRODUCTOS_IN, PAGO_IN, COMPRADOR_IN, VENDEDOR_IN, SYSDATE, CANTIDADES_IN);

        -- Actualiza el inventario de TLM.PRODUCTOS
        UPDATE TLM.PRODUCTOS 
        SET CANTIDAD = CANTIDAD - CANTIDADES_IN 
        WHERE NOMBRE = PRODUCTOS_IN;

        DBMS_OUTPUT.PUT_LINE('Venta registrada correctamente.');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Error: Producto no encontrado.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al registrar la venta: ' || SQLERRM);
    END REGISTRAR_VENTA;

    -- Leer ventas
    PROCEDURE LEER_VENTAS(
        CRITERIO_IN VARCHAR2 DEFAULT NULL
    ) IS
        CURSOR_VENTAS SYS_REFCURSOR;
        VENTA_ROW TLM.VENTAS%ROWTYPE;
    BEGIN
        IF CRITERIO_IN IS NULL THEN
            OPEN CURSOR_VENTAS FOR
            SELECT * FROM TLM.VENTAS;
        ELSE
            OPEN CURSOR_VENTAS FOR
            SELECT * FROM TLM.VENTAS WHERE COMPRADOR LIKE '%' || CRITERIO_IN || '%';
        END IF;

        LOOP
            FETCH CURSOR_VENTAS INTO VENTA_ROW;
            EXIT WHEN CURSOR_VENTAS%NOTFOUND;

            DBMS_OUTPUT.PUT_LINE(
                'Venta ID: ' || VENTA_ROW.ID || 
                ', Monto: ' || VENTA_ROW.MONTO || 
                ', Producto: ' || VENTA_ROW.PRODUCTOS || 
                ', Comprador: ' || VENTA_ROW.COMPRADOR || 
                ', Fecha: ' || VENTA_ROW.FECHA
            );
        END LOOP;

        CLOSE CURSOR_VENTAS;
    END LEER_VENTAS;

    -- Actualizar una venta
    PROCEDURE ACTUALIZAR_VENTA(
        ID_IN NUMBER,
        MONTO_IN NUMBER,
        PRODUCTOS_IN VARCHAR2,
        PAGO_IN VARCHAR2,
        COMPRADOR_IN VARCHAR2,
        VENDEDOR_IN VARCHAR2,
        CANTIDADES_IN NUMBER
    ) IS
    BEGIN
        UPDATE TLM.VENTAS
        SET MONTO = MONTO_IN,
            PRODUCTOS = PRODUCTOS_IN,
            PAGO = PAGO_IN,
            COMPRADOR = COMPRADOR_IN,
            VENDEDOR = VENDEDOR_IN,
            CANTIDADES = CANTIDADES_IN,
            FECHA = SYSDATE
        WHERE ID = ID_IN;

        DBMS_OUTPUT.PUT_LINE('Venta actualizada correctamente. ID: ' || ID_IN);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Error: Venta no encontrada.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al actualizar la venta: ' || SQLERRM);
    END ACTUALIZAR_VENTA;

    -- Eliminar una venta
    PROCEDURE ELIMINAR_VENTA(
        ID_IN NUMBER
    ) IS
    BEGIN
        DELETE FROM TLM.VENTAS
        WHERE ID = ID_IN;

        DBMS_OUTPUT.PUT_LINE('Venta eliminada correctamente. ID: ' || ID_IN);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Error: Venta no encontrada.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error al eliminar la venta: ' || SQLERRM);
    END ELIMINAR_VENTA;

    -- Calcular el monto final de la venta
    FUNCTION CALCULAR_MONTO(
        MONTO_IN NUMBER,
        IMPUESTO_IN NUMBER,
        DESCUENTO_IN NUMBER
    ) RETURN NUMBER IS
    BEGIN
        RETURN (MONTO_IN + (MONTO_IN * IMPUESTO_IN / 100)) - DESCUENTO_IN;
    END CALCULAR_MONTO;
END PKG_VENTAS;


BEGIN
    PKG_VENTAS.REGISTRAR_VENTA(
        MONTO_IN => 15000,
        PRODUCTOS_IN => 'Jeans',
        PAGO_IN => 'Tarjeta',
        COMPRADOR_IN => '117880731',
        VENDEDOR_IN => '117880731',
        CANTIDADES_IN => 3
    );
END;


BEGIN
    PKG_VENTAS.LEER_VENTAS();
END;


BEGIN
    PKG_VENTAS.ACTUALIZAR_VENTA(
        ID_IN => 1,
        MONTO_IN => 20000,
        PRODUCTOS_IN => 'Camiseta',
        PAGO_IN => 'Efectivo',
        COMPRADOR_IN => '117880731',
        VENDEDOR_IN => '117880731',
        CANTIDADES_IN => 5
    );
END;



BEGIN
    PKG_VENTAS.ELIMINAR_VENTA(ID_IN => 1);
END;



------PAQUETE INVENTARIO------

CREATE OR REPLACE PACKAGE PKG_INVENTARIO AS
    PROCEDURE ACTUALIZAR_INVENTARIO(
        CODIGO_IN INT,
        CANTIDAD_IN INT
    );
    FUNCTION CALCULAR_PRECIO_TOTAL(
        PRECIO_IN NUMBER,
        CANTIDAD_IN NUMBER
    ) RETURN NUMBER;
END PKG_INVENTARIO;

CREATE OR REPLACE PACKAGE BODY PKG_INVENTARIO AS
    PROCEDURE ACTUALIZAR_INVENTARIO(
        CODIGO_IN INT,
        CANTIDAD_IN INT
    ) IS
    BEGIN
        UPDATE PRODUCTOS
        SET CANTIDAD = CANTIDAD + CANTIDAD_IN
        WHERE CODIGO = CODIGO_IN;
    END;

    FUNCTION CALCULAR_PRECIO_TOTAL(
        PRECIO_IN NUMBER,
        CANTIDAD_IN NUMBER
    ) RETURN NUMBER IS
    BEGIN
        RETURN PRECIO_IN * CANTIDAD_IN;
    END;
END PKG_INVENTARIO;


BEGIN
    PKG_INVENTARIO.ACTUALIZAR_INVENTARIO(
        CODIGO_IN => 101, 
        CANTIDAD_IN => 10
    );
END;


SELECT * FROM PRODUCTOS WHERE CODIGO = 101;

SELECT PKG_INVENTARIO.CALCULAR_PRECIO_TOTAL(7500, 5) AS PRECIO_TOTAL FROM DUAL;


BEGIN
    -- Agrega más unidades al inventario
    PKG_INVENTARIO.ACTUALIZAR_INVENTARIO(
        CODIGO_IN => 101, 
        CANTIDAD_IN => 20
    );

    -- Calcula el precio total para 20 unidades
    DBMS_OUTPUT.PUT_LINE('Precio Total: ' || PKG_INVENTARIO.CALCULAR_PRECIO_TOTAL(7500, 20));
END;


SELECT * FROM PRODUCTOS WHERE CODIGO = 101;


SQL_DINAMICO

CREATE OR REPLACE PROCEDURE REPORTE_PRODUCTOS_DINAMICO(
    FILTRO_CANTIDAD IN VARCHAR2 DEFAULT NULL, -- Ejemplo: 'CANTIDAD > 10'
    FILTRO_PRECIO IN VARCHAR2 DEFAULT NULL,  -- Ejemplo: 'PRECIO < 20000'
    ORDEN_COL IN VARCHAR2 DEFAULT NULL,      -- Ejemplo: 'PRECIO'
    ORDEN_TIPO IN VARCHAR2 DEFAULT NULL      -- Ejemplo: 'DESC'
) AS
    QUERY VARCHAR2(2000);
    CURSOR_RESULT SYS_REFCURSOR;
    PRODUCTO_ROW PRODUCTOS%ROWTYPE;
BEGIN
    -- Construcción inicial de la consulta
    QUERY := 'SELECT * FROM PRODUCTOS WHERE 1=1';

    -- Agregar filtros dinámicos
    IF FILTRO_CANTIDAD IS NOT NULL THEN
        QUERY := QUERY || ' AND ' || FILTRO_CANTIDAD;
    END IF;

    IF FILTRO_PRECIO IS NOT NULL THEN
        QUERY := QUERY || ' AND ' || FILTRO_PRECIO;
    END IF;

    -- Agregar orden dinámico
    IF ORDEN_COL IS NOT NULL THEN
        QUERY := QUERY || ' ORDER BY ' || ORDEN_COL;

        -- Si se especifica el tipo de orden
        IF ORDEN_TIPO IS NOT NULL THEN
            QUERY := QUERY || ' ' || ORDEN_TIPO;
        END IF;
    END IF;

    -- Abre el cursor dinámico
    OPEN CURSOR_RESULT FOR QUERY;

    -- Muestra cada fila del resultado
    LOOP
        FETCH CURSOR_RESULT INTO PRODUCTO_ROW;
        EXIT WHEN CURSOR_RESULT%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE(
            'Producto: ' || PRODUCTO_ROW.NOMBRE || 
            ', Precio: ' || PRODUCTO_ROW.PRECIO || 
            ', Cantidad: ' || PRODUCTO_ROW.CANTIDAD
        );
    END LOOP;

    -- Cierra el cursor
    CLOSE CURSOR_RESULT;

    -- Mensaje adicional
    DBMS_OUTPUT.PUT_LINE('Consulta dinámica ejecutada: ' || QUERY);
END;


Reporte de productos con cantidad mayor a 20:
BEGIN
    REPORTE_PRODUCTOS_DINAMICO(
        FILTRO_CANTIDAD => 'CANTIDAD > 20'
    );
END;


Reporte de productos con precio menor a 5000:
BEGIN
    REPORTE_PRODUCTOS_DINAMICO(
        FILTRO_PRECIO => 'PRECIO < 5000'
    );
END;

Reporte combinado de productos con cantidad mayor a 10 y precio menor a 20000:
BEGIN
    REPORTE_PRODUCTOS_DINAMICO(
        FILTRO_CANTIDAD => 'CANTIDAD > 10',
        FILTRO_PRECIO => 'PRECIO < 20000'
    );
END;

Reporte ordenado por precio descendente:
BEGIN
    REPORTE_PRODUCTOS_DINAMICO(
        ORDEN_COL => 'PRECIO',
        ORDEN_TIPO => 'DESC'
    );
END;

