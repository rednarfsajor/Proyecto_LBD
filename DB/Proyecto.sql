--ESQUEMA TLM

CREATE USER TLM IDENTIFIED BY TLM;
ALTER USER TLM QUOTA UNLIMITED ON USERS;
GRANT DBA, CREATE SESSION TO TLM;
CONNECT TLM/TLM;

-- TABLA CLIENTES
CREATE TABLE TLM.CLIENTES(
        CEDULA VARCHAR2(9) NOT NULL CONSTRAINT CLIENTES_PK PRIMARY KEY,
        NOMBRE VARCHAR2(30),
        TIPO VARCHAR2(20),
        TELEFONO VARCHAR2(11),
        DIRECCION VARCHAR2(100),
        CORREO VARCHAR2(30)
)

SELECT * FROM TLM.CLIENTES;

-- TABLA PROVEEDORES
CREATE TABLE TLM.PROVEEDORES(
        CEDULA INT NOT NULL CONSTRAINT PROVEEDORES_PK PRIMARY KEY,
        NOMBRE VARCHAR2(30),
        TIPO VARCHAR2(20),
        TELEFONO VARCHAR2(11),
        DIRECCION VARCHAR2(100),
        CORREO VARCHAR2(30),
        PRODUCTOS NUMBER
)
SELECT * FROM TLM.PROVEEDORES;

CREATE TABLE TLM.VENTAS (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT VENTAS_PK PRIMARY KEY,
    MONTO NUMBER,
    PRODUCTOS VARCHAR2(50),
    PAGO VARCHAR2(25),
    COMPRADOR VARCHAR2(20) CONSTRAINT COMPRADOR_FK REFERENCES TLM.CLIENTES(CEDULA),
    VENDEDOR VARCHAR2(20) CONSTRAINT VENDEDOR_FK REFERENCES TLM.PROVEEDORES(CEDULA),
    FECHA DATE,
    CANTIDADES NUMBER
);

SELECT * FROM TLM.VENTAS;

-- TABLA EMPLEADOS
CREATE TABLE TLM.EMPLEADOS (
    CEDULA INT PRIMARY KEY NOT NULL,
    NOMBRE VARCHAR2(50),
    TIPO VARCHAR2(20),
    TELEFONO VARCHAR2(15),
    DIRECCION CLOB,
    CORREO VARCHAR2(50),
    PUESTO VARCHAR2(50),
    SALARIO INT,
    USERNAME VARCHAR2(30),
    PASSWORD VARCHAR2(30)
);
SELECT * FROM TLM.EMPLEADOS;
-- TABLA PRODUCTOS
CREATE TABLE TLM.PRODUCTOS (
    CODIGO INT PRIMARY KEY NOT NULL,
    NOMBRE VARCHAR2(50),
    DESCRIPCION VARCHAR2(200),
    CANTIDAD INT,
    PRECIO INT
);
SELECT * FROM TLM.PRODUCTOS;


INSERT INTO TLM.PROVEEDORES (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PRODUCTOS)
VALUES ('117880731', 'Proveedor1', 'General', '1234567890', 'Heredia Centro', 'provedor1@ejemplo.com', 10);

INSERT INTO TLM.CLIENTES (CEDULA, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, TIPO, TELEFONO, DIRECCION, CORREO)
VALUES ('117880731', 'Juan', 'P�rez', 'L�pez', 'Regular', '1234567890', 'San Jos�', 'jperez@ejemplo.com');

INSERT INTO TLM.VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
VALUES (45, 'TEST', 'TARJETA', '117880731', '117880731', SYSDATE, 3);

INSERT INTO TLM.EMPLEADOS (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PUESTO, SALARIO, USERNAME, PASSWORD)
VALUES (123456789, 'Mar�a Gonz�lez', 'Tiempo completo', '9876543210', 'Avenida Central, San Jos�', 'mgonzalez@empresa.com', 'Gerente', 1500000, 'maria.gonzalez', 'password123');

INSERT INTO TLM.PRODUCTOS (CODIGO, NOMBRE, DESCRIPCION, CANTIDAD, PRECIO)
VALUES (101, 'Jeans', 'Color gris', 25, 7500);


----------- TABLAS DE AUDITORIA---------------

CREATE SEQUENCE TLM.SEC_LOG_ID
  START WITH 1
  INCREMENT BY 1
  MAXVALUE 99999999999999999999999
  MINVALUE 1
  NOCYCLE;

CREATE TABLE TLM.AUDIT_CLIENTES(
        LOG_ID INT CONSTRAINT AUDIT_CLIENTES_PK PRIMARY KEY,
        CEDULA VARCHAR2(9),
        NOMBRE VARCHAR2(30),
        TIPO VARCHAR2(20),
        TELEFONO VARCHAR2(11),
        DIRECCION VARCHAR2(100),
        CORREO VARCHAR2(30),
        ACCION VARCHAR(20),
        FECHA_ACCION DATE DEFAULT SYSDATE
)

CREATE OR REPLACE TRIGGER  TLM.TRG_AUDIT_CLIENTES
BEFORE UPDATE OR DELETE OR INSERT ON CLIENTES
FOR EACH ROW
BEGIN
    IF  UPDATING THEN
    INSERT  INTO AUDIT_CLIENTES VALUES (null, :NEW.CEDULA, :NEW.NOMBRE, :NEW.TIPO, :NEW.TELEFONO, :NEW.DIRECCION, :NEW.CORREO, 'MODIFICACION', SYSDATE);
    ELSIF DELETING THEN
    INSERT  INTO AUDIT_CLIENTES VALUES (null, :OLD.CEDULA, :OLD.NOMBRE, :OLD.TIPO, :OLD.TELEFONO, :OLD.DIRECCION, :OLD.CORREO, 'ELIMINACION', SYSDATE);
    ELSIF INSERTING THEN
    INSERT  INTO AUDIT_CLIENTES VALUES (null, :NEW.CEDULA, :NEW.NOMBRE, :NEW.TIPO, :NEW.TELEFONO, :NEW.DIRECCION, :NEW.CORREO, 'CREACION', SYSDATE);
    END IF;
EXCEPTION     
  WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR: '|| SQLCODE || ' ' || SQLERRM);          
END;

CREATE OR REPLACE TRIGGER TLM.TRG_LOG_ID_AUDIT_CLIENTES
BEFORE INSERT ON AUDIT_CLIENTES
FOR EACH ROW
BEGIN
  :new.LOG_ID := SEC_LOG_ID.NEXTVAL;
END;



CREATE TABLE TLM.AUDIT_PROVEEDORES(
        CEDULA INT NOT NULL CONSTRAINT PROVEEDORES_PK PRIMARY KEY,
        NOMBRE VARCHAR2(30),
        TIPO VARCHAR2(20),
        TELEFONO VARCHAR2(11),
        DIRECCION VARCHAR2(100),
        CORREO VARCHAR2(30),
        PRODUCTOS NUMBER
)

CREATE TABLE TLM.AUDIT_VENTAS (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT VENTAS_PK PRIMARY KEY,
    MONTO NUMBER,
    PRODUCTOS VARCHAR2(50),
    PAGO VARCHAR2(25),
    COMPRADOR VARCHAR2(20) CONSTRAINT COMPRADOR_FK REFERENCES TLM.CLIENTES(CEDULA),
    VENDEDOR VARCHAR2(20) CONSTRAINT VENDEDOR_FK REFERENCES TLM.PROVEEDORES(CEDULA),
    FECHA DATE,
    CANTIDADES NUMBER
);


CREATE TABLE TLM.AUDIT_EMPLEADOS (
    CEDULA INT PRIMARY KEY NOT NULL,
    NOMBRE VARCHAR2(50),
    TIPO VARCHAR2(20),
    TELEFONO VARCHAR2(15),
    DIRECCION CLOB,
    CORREO VARCHAR2(50),
    PUESTO VARCHAR2(50),
    SALARIO INT,
    USERNAME VARCHAR2(30),
    PASSWORD VARCHAR2(30)
);

CREATE TABLE TLM.AUDIT_PRODUCTOS (
    CODIGO INT PRIMARY KEY NOT NULL,
    NOMBRE VARCHAR2(50),
    DESCRIPCION VARCHAR2(200),
    CANTIDAD INT,
    PRECIO INT
);

----------- PROCEDIMIENTOS -----------



------------------------- INSERTAR CLIENTE -------------------------------------

CREATE OR REPLACE PROCEDURE INSERTAR_CLIENTE(
    CEDULA_IN IN VARCHAR2,
    NOMBRE_IN IN VARCHAR2,
    PRIMER_APELLIDO_IN IN VARCHAR2,
    SEGUNDO_APELLIDO_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN VARCHAR2,
    CORREO_IN IN VARCHAR2
) AS
BEGIN
    INSERT INTO CLIENTES (CEDULA, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, TIPO, TELEFONO, DIRECCION, CORREO)
    VALUES (CEDULA_IN, NOMBRE_IN, PRIMER_APELLIDO_IN, SEGUNDO_APELLIDO_IN, TIPO_IN, TELEFONO_IN, DIRECCION_IN, CORREO_IN);
    DBMS_OUTPUT.PUT_LINE('Cliente insertado correctamente: ' || CEDULA_IN);
END;


------------------------- LEER CLIENTE -------------------------------------

CREATE OR REPLACE VIEW VISTA_CLIENTE AS
SELECT 
    CEDULA,
    NOMBRE,
    PRIMER_APELLIDO,
    SEGUNDO_APELLIDO,
    TIPO,
    TELEFONO,
    DIRECCION,
    CORREO
FROM 
    CLIENTES;



------------------------- ACTUALIZAR CLIENTE -------------------------------------

CREATE OR REPLACE PROCEDURE ACTUALIZAR_CLIENTE(
    CEDULA_IN IN VARCHAR2,
    NOMBRE_IN IN VARCHAR2,
    PRIMER_APELLIDO_IN IN VARCHAR2,
    SEGUNDO_APELLIDO_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN VARCHAR2,
    CORREO_IN IN VARCHAR2
) AS
BEGIN
    UPDATE CLIENTES
    SET NOMBRE = NOMBRE_IN,
        PRIMER_APELLIDO = PRIMER_APELLIDO_IN,
        SEGUNDO_APELLIDO = SEGUNDO_APELLIDO_IN,
        TIPO = TIPO_IN,
        TELEFONO = TELEFONO_IN,
        DIRECCION = DIRECCION_IN,
        CORREO = CORREO_IN
    WHERE CEDULA = CEDULA_IN;

    DBMS_OUTPUT.PUT_LINE('Cliente actualizado correctamente: ' || CEDULA_IN);
END;


------------------------------------- ELIMINAR CLIENTE -------------------------------------

CREATE OR REPLACE PROCEDURE ELIMINAR_CLIENTE(
    CEDULA_IN IN VARCHAR2
) AS
BEGIN
    DELETE FROM CLIENTES
    WHERE CEDULA = CEDULA_IN;
    
    DBMS_OUTPUT.PUT_LINE('Cliente eliminado correctamente: ' || CEDULA_IN);
END;


EXEC INSERTAR_CLIENTE('3652365', 'Pedro', 'Suarez', 'Madriz', 'Regular', '1234567890', 'Calle Ficticia 123', 'pedro.s@mail.com');

EXEC ACTUALIZAR_CLIENTE('3652365', 'Pedro', 'Suarez', 'Madriz', 'VIP', '0987654321', 'Calle Ficticia 456', 'pedro.s@newmail.com');

EXEC ELIMINAR_CLIENTE('3652365');

SELECT * FROM VISTA_CLIENTE WHERE CEDULA = :cedula_in;


------------------------ PROVEEDORES -------------------------------------------


------------------------------------- INSERTAR PROVEEDOR -------------------------------------
CREATE OR REPLACE PROCEDURE INSERTAR_PROVEEDOR(
    CEDULA_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN VARCHAR2,
    CORREO_IN IN VARCHAR2,
    PRODUCTOS_IN IN NUMBER
) AS
BEGIN
    INSERT INTO PROVEEDORES (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PRODUCTOS)
    VALUES (CEDULA_IN, NOMBRE_IN, TIPO_IN, TELEFONO_IN, DIRECCION_IN, CORREO_IN, PRODUCTOS_IN);

    DBMS_OUTPUT.PUT_LINE('Proveedor insertado correctamente: ' || CEDULA_IN);
END;

------------------------------------- LEER PROVEEDOR -------------------------------------
CREATE OR REPLACE VIEW VISTA_PROVEEDOR AS
SELECT 
    CEDULA,
    NOMBRE,
    TIPO,
    TELEFONO,
    DIRECCION,
    CORREO,
    PRODUCTOS
FROM 
    PROVEEDORES;

------------------------------------- ACTUALIZAR PROVEEDOR -------------------------------------
CREATE OR REPLACE PROCEDURE ACTUALIZAR_PROVEEDOR(
    CEDULA_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN VARCHAR2,
    CORREO_IN IN VARCHAR2,
    PRODUCTOS_IN IN NUMBER
) AS
BEGIN
    UPDATE PROVEEDORES
    SET NOMBRE = NOMBRE_IN,
        TIPO = TIPO_IN,
        TELEFONO = TELEFONO_IN,
        DIRECCION = DIRECCION_IN,
        CORREO = CORREO_IN,
        PRODUCTOS = PRODUCTOS_IN
    WHERE CEDULA = CEDULA_IN;

    DBMS_OUTPUT.PUT_LINE('Proveedor actualizado correctamente: ' || CEDULA_IN);
END;


------------------------ ELIMINAR PROVEEDOR ------------------------
CREATE OR REPLACE PROCEDURE ELIMINAR_PROVEEDOR(
    CEDULA_IN IN INT
) AS
BEGIN
    DELETE FROM PROVEEDORES
    WHERE CEDULA = CEDULA_IN;
    
    DBMS_OUTPUT.PUT_LINE('Proveedor eliminado correctamente: ' || CEDULA_IN);
END;



EXEC INSERTAR_PROVEEDOR('98745623', 'ProveedorA', 'Mayorista', '9876543210', 'Avenida 9', 'proveedora@mail.com', 50);

EXEC ACTUALIZAR_PROVEEDOR('98745623', 'ProveedorA', 'Distribuidor', '9888888888', 'Calle Real 456', 'proveedorupdate@mail.com', 60);

EXEC ELIMINAR_PROVEEDOR('98745623');

SELECT * FROM VISTA_PROVEEDOR WHERE CEDULA = :cedula_in;
------------------------------------------------------------------------
------------------------------------------------------------------------

------------------------ CREAR EMPLEADO ------------------------

CREATE OR REPLACE PROCEDURE INSERTAR_EMPLEADO(
    CEDULA_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN CLOB,
    CORREO_IN IN VARCHAR2,
    PUESTO_IN IN VARCHAR2,
    SALARIO_IN IN INT,
    USERNAME_IN IN VARCHAR2,
    PASSWORD_IN IN VARCHAR2
) AS
BEGIN
    INSERT INTO EMPLEADOS (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PUESTO, SALARIO, USERNAME, PASSWORD)
    VALUES (CEDULA_IN, NOMBRE_IN, TIPO_IN, TELEFONO_IN, DIRECCION_IN, CORREO_IN, PUESTO_IN, SALARIO_IN, USERNAME_IN, PASSWORD_IN);
    
    DBMS_OUTPUT.PUT_LINE('Empleado insertado correctamente.');
END;


------------------------ LEER EMPLEADO ------------------------
CREATE OR REPLACE VIEW VISTA_EMPLEADO AS
SELECT 
    CEDULA,
    NOMBRE,
    TIPO,
    TELEFONO,
    DIRECCION,
    CORREO,
    PUESTO,
    SALARIO,
    USERNAME,
    PASSWORD
FROM 
    EMPLEADOS;


------------------------ ACTUALIZAR EMPLEADO ------------------------
CREATE OR REPLACE PROCEDURE ACTUALIZAR_EMPLEADO(
    CEDULA_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN CLOB,
    CORREO_IN IN VARCHAR2,
    PUESTO_IN IN VARCHAR2,
    SALARIO_IN IN INT,
    USERNAME_IN IN VARCHAR2,
    PASSWORD_IN IN VARCHAR2
) AS
BEGIN
    UPDATE EMPLEADOS
    SET NOMBRE = NOMBRE_IN,
        TELEFONO = TELEFONO_IN,
        DIRECCION = DIRECCION_IN,
        CORREO = CORREO_IN,
        PUESTO = PUESTO_IN,
        SALARIO = SALARIO_IN,
        USERNAME = USERNAME_IN,
        PASSWORD = PASSWORD_IN
    WHERE CEDULA = CEDULA_IN;
    
    DBMS_OUTPUT.PUT_LINE('Empleado actualizado correctamente.');
END;




------------------------ ELIMINAR EMPLEADO ------------------------

CREATE OR REPLACE PROCEDURE ELIMINAR_EMPLEADO(
    CEDULA_IN IN INT
) AS
BEGIN
    DELETE FROM EMPLEADOS
    WHERE CEDULA = CEDULA_IN;
    
    DBMS_OUTPUT.PUT_LINE('Empleado eliminado correctamente.');
END;




EXEC INSERTAR_EMPLEADO(12365428, 'Samara Martinez', 'Administrativo', '555-1234', 'Calle Ficticia 123', 's.martinez@email.com', 'Gerente', 3500, 'juanp', 'password123');

EXEC ACTUALIZAR_EMPLEADO(12365428, 'Samara Martinez', 'Manager', '555-4321', 'Calle Real 456', 's.martinez@newmail.com', 'Director', 4000, 'juanp', 'newpassword123');

EXEC ELIMINAR_EMPLEADO(12365428);

SELECT * FROM VISTA_EMPLEADO WHERE CEDULA = :cedula_in;

------------------------ INSERTAR PRODUCTO ------------------------
CREATE OR REPLACE PROCEDURE INSERTAR_PRODUCTO(
    CODIGO_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    DESCRIPCION_IN IN VARCHAR2,
    CANTIDAD_IN IN INT,
    PRECIO_IN IN INT
) AS
BEGIN
    INSERT INTO PRODUCTOS (CODIGO, NOMBRE, DESCRIPCION, CANTIDAD, PRECIO)
    VALUES (CODIGO_IN, NOMBRE_IN, DESCRIPCION_IN, CANTIDAD_IN, PRECIO_IN);
    
    DBMS_OUTPUT.PUT_LINE('Producto insertado correctamente.');
END;


------------------------ LEER PRODUCTO ------------------------
CREATE OR REPLACE VIEW VISTA_PRODUCTO AS
SELECT 
    CODIGO,
    NOMBRE,
    DESCRIPCION,
    CANTIDAD,
    PRECIO
FROM 
    PRODUCTOS;



------------------------ ACTUALIZAR PRODUCTO ------------------------
CREATE OR REPLACE PROCEDURE ACTUALIZAR_PRODUCTO(
    CODIGO_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    DESCRIPCION_IN IN VARCHAR2,
    CANTIDAD_IN IN INT,
    PRECIO_IN IN INT
) AS
BEGIN
    UPDATE PRODUCTOS
    SET NOMBRE = NOMBRE_IN,
        DESCRIPCION = DESCRIPCION_IN,
        CANTIDAD = CANTIDAD_IN,
        PRECIO = PRECIO_IN
    WHERE CODIGO = CODIGO_IN;
    
    DBMS_OUTPUT.PUT_LINE('Producto actualizado correctamente.');
END;


------------------------ ELIMINAR PRODUCTO ------------------------

CREATE OR REPLACE PROCEDURE ELIMINAR_PRODUCTO(
    CODIGO_IN IN INT
) AS
BEGIN
    DELETE FROM PRODUCTOS
    WHERE CODIGO = CODIGO_IN;
    
    DBMS_OUTPUT.PUT_LINE('Producto eliminado correctamente.');
END;


EXEC INSERTAR_PRODUCTO(102, 'Jeans', 'Azul', 50, 1500);

EXEC INSERTAR_PRODUCTO(103, 'Jeans', 'Negro', 100, 1700);

EXEC ACTUALIZAR_PRODUCTO(102, 'Jeans', 'Negro', 45, 1600);

EXEC ELIMINAR_PRODUCTO(102);

SELECT * FROM VISTA_PRODUCTO WHERE CODIGO = :codigo_in;





--CREADO DEL ESQUEMA
CREATE USER PROYECTO_TIENDA IDENTIFIED BY PROYECTO_TIENDA ;

GRANT CONNECT, RESOURCE TO PROYECTO_TIENDA;

CONN PROYECTO_TIENDA /PROYECTO_TIENDA;







