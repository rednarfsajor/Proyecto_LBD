--ESQUEMA TLM

CREATE USER TLM IDENTIFIED BY TLM;
ALTER USER TLM QUOTA UNLIMITED ON USERS;
GRANT DBA, CREATE SESSION TO TLM;
CONNECT TLM/TLM;

-- TABLA CLIENTES
CREATE TABLE TLM.CLIENTES(
        CEDULA VARCHAR2(9) NOT NULL CONSTRAINT CLIENTES_PK PRIMARY KEY,
        NOMBRE VARCHAR2(30),
        PRIMER_APELLIDO VARCHAR2(20),
        SEGUNDO_APELLIDO VARCHAR2(20),
        TIPO VARCHAR2(20),
        TELEFONO VARCHAR2(11),
        DIRECCION VARCHAR2(100),
        CORREO VARCHAR2(30)
)

SELECT * FROM TLM.CLIENTES;

-- TABLA PROVEEDORES
CREATE TABLE TLM.PROVEEDORES(
        CEDULA VARCHAR2(9) NOT NULL CONSTRAINT PROVEEDORES_PK PRIMARY KEY,
        NOMBRE VARCHAR2(30),
        TIPO VARCHAR2(20),
        TELEFONO VARCHAR2(11),
        DIRECCION VARCHAR2(100),
        CORREO VARCHAR2(30),
        PRODUCTOS NUMBER
)
SELECT * FROM TLM.PROVEEDORES;

CREATE TABLE TLM.VENTAS (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY CONSTRAINT VENTAS_PK PRIMARY KEY,
    MONTO NUMBER,
    PRODUCTOS VARCHAR2(50),
    PAGO VARCHAR2(25),
    COMPRADOR VARCHAR2(20) CONSTRAINT COMPRADOR_FK REFERENCES TLM.CLIENTES(CEDULA),
    VENDEDOR VARCHAR2(20) CONSTRAINT VENDEDOR_FK REFERENCES TLM.PROVEEDORES(CEDULA),
    FECHA DATE,
    CANTIDADES NUMBER
);

SELECT * FROM TLM.VENTAS;

-- TABLA EMPLEADOS
CREATE TABLE TLM.EMPLEADOS (
    CEDULA INT PRIMARY KEY NOT NULL,
    NOMBRE VARCHAR2(50),
    TIPO VARCHAR2(20),
    TELEFONO VARCHAR2(15),
    DIRECCION CLOB,
    CORREO VARCHAR2(50),
    PUESTO VARCHAR2(50),
    SALARIO INT,
    USERNAME VARCHAR2(30),
    PASSWORD VARCHAR2(30)
);
SELECT * FROM TLM.EMPLEADOS;
-- TABLA PRODUCTOS
CREATE TABLE TLM.PRODUCTOS (
    CODIGO INT PRIMARY KEY NOT NULL,
    NOMBRE VARCHAR2(50),
    DESCRIPCION CLOB,
    CANTIDAD INT,
    PRECIO INT
);
SELECT * FROM TLM.PRODUCTOS;


INSERT INTO TLM.PROVEEDORES (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PRODUCTOS)
VALUES ('117880731', 'Proveedor1', 'General', '1234567890', 'Heredia Centro', 'provedor1@ejemplo.com', 10);

INSERT INTO TLM.CLIENTES (CEDULA, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, TIPO, TELEFONO, DIRECCION, CORREO)
VALUES ('117880731', 'Juan', 'Pérez', 'López', 'Regular', '1234567890', 'San José', 'jperez@ejemplo.com');

INSERT INTO TLM.VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
VALUES (45, 'TEST', 'TARJETA', '117880731', '117880731', SYSDATE, 3);

INSERT INTO TLM.EMPLEADOS (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PUESTO, SALARIO, USERNAME, PASSWORD)
VALUES (123456789, 'María González', 'Tiempo completo', '9876543210', 'Avenida Central, San José', 'mgonzalez@empresa.com', 'Gerente', 1500000, 'maria.gonzalez', 'password123');

INSERT INTO TLM.PRODUCTOS (CODIGO, NOMBRE, DESCRIPCION, CANTIDAD, PRECIO)
VALUES (101, 'Jeans', 'Color gris', 25, 7500);

----------- PROCEDIMIENTOS -----------



------------------------- INSERTAR CLIENTE -------------------------------------

CREATE OR REPLACE PROCEDURE INSERTAR_CLIENTE(
    CEDULA_IN IN VARCHAR2,
    NOMBRE_IN IN VARCHAR2,
    PRIMER_APELLIDO_IN IN VARCHAR2,
    SEGUNDO_APELLIDO_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN VARCHAR2,
    CORREO_IN IN VARCHAR2
) AS
BEGIN
    INSERT INTO CLIENTES (CEDULA, NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, TIPO, TELEFONO, DIRECCION, CORREO)
    VALUES (CEDULA_IN, NOMBRE_IN, PRIMER_APELLIDO_IN, SEGUNDO_APELLIDO_IN, TIPO_IN, TELEFONO_IN, DIRECCION_IN, CORREO_IN);
    DBMS_OUTPUT.PUT_LINE('Cliente insertado correctamente: ' || CEDULA_IN);
END;


------------------------- LEER CLIENTE -------------------------------------

CREATE OR REPLACE VIEW VISTA_CLIENTE AS
SELECT 
    CEDULA,
    NOMBRE,
    PRIMER_APELLIDO,
    SEGUNDO_APELLIDO,
    TIPO,
    TELEFONO,
    DIRECCION,
    CORREO
FROM 
    CLIENTES;



------------------------- ACTUALIZAR CLIENTE -------------------------------------

CREATE OR REPLACE PROCEDURE ACTUALIZAR_CLIENTE(
    CEDULA_IN IN VARCHAR2,
    NOMBRE_IN IN VARCHAR2,
    PRIMER_APELLIDO_IN IN VARCHAR2,
    SEGUNDO_APELLIDO_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN VARCHAR2,
    CORREO_IN IN VARCHAR2
) AS
BEGIN
    UPDATE CLIENTES
    SET NOMBRE = NOMBRE_IN,
        PRIMER_APELLIDO = PRIMER_APELLIDO_IN,
        SEGUNDO_APELLIDO = SEGUNDO_APELLIDO_IN,
        TIPO = TIPO_IN,
        TELEFONO = TELEFONO_IN,
        DIRECCION = DIRECCION_IN,
        CORREO = CORREO_IN
    WHERE CEDULA = CEDULA_IN;

    DBMS_OUTPUT.PUT_LINE('Cliente actualizado correctamente: ' || CEDULA_IN);
END;


------------------------------------- ELIMINAR CLIENTE -------------------------------------

CREATE OR REPLACE PROCEDURE ELIMINAR_CLIENTE(
    CEDULA_IN IN VARCHAR2
) AS
BEGIN
    DELETE FROM CLIENTES
    WHERE CEDULA = CEDULA_IN;
    
    DBMS_OUTPUT.PUT_LINE('Cliente eliminado correctamente: ' || CEDULA_IN);
END;


EXEC INSERTAR_CLIENTE('3652365', 'Pedro', 'Suarez', 'Madriz', 'Regular', '1234567890', 'Calle Ficticia 123', 'pedro.s@mail.com');

EXEC ACTUALIZAR_CLIENTE('3652365', 'Pedro', 'Suarez', 'Madriz', 'VIP', '0987654321', 'Calle Ficticia 456', 'pedro.s@newmail.com');

EXEC ELIMINAR_CLIENTE('3652365');

SELECT * FROM VISTA_CLIENTE WHERE CEDULA = :cedula_in;


------------------------ PROVEEDORES -------------------------------------------


------------------------------------- INSERTAR PROVEEDOR -------------------------------------
CREATE OR REPLACE PROCEDURE INSERTAR_PROVEEDOR(
    CEDULA_IN IN VARCHAR2,
    NOMBRE_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN VARCHAR2,
    CORREO_IN IN VARCHAR2,
    PRODUCTOS_IN IN NUMBER
) AS
BEGIN
    INSERT INTO PROVEEDORES (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PRODUCTOS)
    VALUES (CEDULA_IN, NOMBRE_IN, TIPO_IN, TELEFONO_IN, DIRECCION_IN, CORREO_IN, PRODUCTOS_IN);

    DBMS_OUTPUT.PUT_LINE('Proveedor insertado correctamente: ' || CEDULA_IN);
END;

------------------------------------- LEER PROVEEDOR -------------------------------------
CREATE OR REPLACE VIEW VISTA_PROVEEDOR AS
SELECT 
    CEDULA,
    NOMBRE,
    TIPO,
    TELEFONO,
    DIRECCION,
    CORREO,
    PRODUCTOS
FROM 
    PROVEEDORES;

------------------------------------- ACTUALIZAR PROVEEDOR -------------------------------------
CREATE OR REPLACE PROCEDURE ACTUALIZAR_PROVEEDOR(
    CEDULA_IN IN VARCHAR2,
    NOMBRE_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN VARCHAR2,
    CORREO_IN IN VARCHAR2,
    PRODUCTOS_IN IN NUMBER
) AS
BEGIN
    UPDATE PROVEEDORES
    SET NOMBRE = NOMBRE_IN,
        TIPO = TIPO_IN,
        TELEFONO = TELEFONO_IN,
        DIRECCION = DIRECCION_IN,
        CORREO = CORREO_IN,
        PRODUCTOS = PRODUCTOS_IN
    WHERE CEDULA = CEDULA_IN;

    DBMS_OUTPUT.PUT_LINE('Proveedor actualizado correctamente: ' || CEDULA_IN);
END;


------------------------ ELIMINAR PROVEEDOR ------------------------
CREATE OR REPLACE PROCEDURE ELIMINAR_PROVEEDOR(
    CEDULA_IN IN VARCHAR2
) AS
BEGIN
    DELETE FROM PROVEEDORES
    WHERE CEDULA = CEDULA_IN;
    
    DBMS_OUTPUT.PUT_LINE('Proveedor eliminado correctamente: ' || CEDULA_IN);
END;



EXEC INSERTAR_PROVEEDOR('98745623', 'ProveedorA', 'Mayorista', '9876543210', 'Avenida 9', 'proveedora@mail.com', 50);

EXEC ACTUALIZAR_PROVEEDOR('98745623', 'ProveedorA', 'Distribuidor', '9888888888', 'Calle Real 456', 'proveedorupdate@mail.com', 60);

EXEC ELIMINAR_PROVEEDOR('98745623');

SELECT * FROM VISTA_PROVEEDOR WHERE CEDULA = :cedula_in;
------------------------------------------------------------------------
------------------------------------------------------------------------

------------------------ CREAR EMPLEADO ------------------------

CREATE OR REPLACE PROCEDURE INSERTAR_EMPLEADO(
    CEDULA_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN CLOB,
    CORREO_IN IN VARCHAR2,
    PUESTO_IN IN VARCHAR2,
    SALARIO_IN IN INT,
    USERNAME_IN IN VARCHAR2,
    PASSWORD_IN IN VARCHAR2
) AS
BEGIN
    INSERT INTO EMPLEADOS (CEDULA, NOMBRE, TIPO, TELEFONO, DIRECCION, CORREO, PUESTO, SALARIO, USERNAME, PASSWORD)
    VALUES (CEDULA_IN, NOMBRE_IN, TIPO_IN, TELEFONO_IN, DIRECCION_IN, CORREO_IN, PUESTO_IN, SALARIO_IN, USERNAME_IN, PASSWORD_IN);
    
    DBMS_OUTPUT.PUT_LINE('Empleado insertado correctamente.');
END;


------------------------ LEER EMPLEADO ------------------------
CREATE OR REPLACE VIEW VISTA_EMPLEADO AS
SELECT 
    CEDULA,
    NOMBRE,
    TIPO,
    TELEFONO,
    DIRECCION,
    CORREO,
    PUESTO,
    SALARIO,
    USERNAME,
    PASSWORD
FROM 
    EMPLEADOS;


------------------------ ACTUALIZAR EMPLEADO ------------------------
CREATE OR REPLACE PROCEDURE ACTUALIZAR_EMPLEADO(
    CEDULA_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    TIPO_IN IN VARCHAR2,
    TELEFONO_IN IN VARCHAR2,
    DIRECCION_IN IN CLOB,
    CORREO_IN IN VARCHAR2,
    PUESTO_IN IN VARCHAR2,
    SALARIO_IN IN INT,
    USERNAME_IN IN VARCHAR2,
    PASSWORD_IN IN VARCHAR2
) AS
BEGIN
    UPDATE EMPLEADOS
    SET NOMBRE = NOMBRE_IN,
        TIPO = TIPO_IN,
        TELEFONO = TELEFONO_IN,
        DIRECCION = DIRECCION_IN,
        CORREO = CORREO_IN,
        PUESTO = PUESTO_IN,
        SALARIO = SALARIO_IN,
        USERNAME = USERNAME_IN,
        PASSWORD = PASSWORD_IN
    WHERE CEDULA = CEDULA_IN;
    
    DBMS_OUTPUT.PUT_LINE('Empleado actualizado correctamente.');
END;




------------------------ ELIMINAR EMPLEADO ------------------------

CREATE OR REPLACE PROCEDURE ELIMINAR_EMPLEADO(
    CEDULA_IN IN INT
) AS
BEGIN
    DELETE FROM EMPLEADOS
    WHERE CEDULA = CEDULA_IN;
    
    DBMS_OUTPUT.PUT_LINE('Empleado eliminado correctamente.');
END;




EXEC INSERTAR_EMPLEADO(12365428, 'Samara Martinez', 'Administrativo', '555-1234', 'Calle Ficticia 123', 's.martinez@email.com', 'Gerente', 3500, 'juanp', 'password123');

EXEC ACTUALIZAR_EMPLEADO(12365428, 'Samara Martinez', 'Manager', '555-4321', 'Calle Real 456', 's.martinez@newmail.com', 'Director', 4000, 'juanp', 'newpassword123');

EXEC ELIMINAR_EMPLEADO(12365428);

SELECT * FROM VISTA_EMPLEADO WHERE CEDULA = :cedula_in;

------------------------ INSERTAR PRODUCTO ------------------------
CREATE OR REPLACE PROCEDURE INSERTAR_PRODUCTO(
    CODIGO_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    DESCRIPCION_IN IN CLOB,
    CANTIDAD_IN IN INT,
    PRECIO_IN IN INT
) AS
BEGIN
    INSERT INTO PRODUCTOS (CODIGO, NOMBRE, DESCRIPCION, CANTIDAD, PRECIO)
    VALUES (CODIGO_IN, NOMBRE_IN, DESCRIPCION_IN, CANTIDAD_IN, PRECIO_IN);
    
    DBMS_OUTPUT.PUT_LINE('Producto insertado correctamente.');
END;


------------------------ LEER PRODUCTO ------------------------
CREATE OR REPLACE VIEW VISTA_PRODUCTO AS
SELECT 
    CODIGO,
    NOMBRE,
    DESCRIPCION,
    CANTIDAD,
    PRECIO
FROM 
    PRODUCTOS;



------------------------ ACTUALIZAR PRODUCTO ------------------------
CREATE OR REPLACE PROCEDURE ACTUALIZAR_PRODUCTO(
    CODIGO_IN IN INT,
    NOMBRE_IN IN VARCHAR2,
    DESCRIPCION_IN IN CLOB,
    CANTIDAD_IN IN INT,
    PRECIO_IN IN INT
) AS
BEGIN
    UPDATE PRODUCTOS
    SET NOMBRE = NOMBRE_IN,
        DESCRIPCION = DESCRIPCION_IN,
        CANTIDAD = CANTIDAD_IN,
        PRECIO = PRECIO_IN
    WHERE CODIGO = CODIGO_IN;
    
    DBMS_OUTPUT.PUT_LINE('Producto actualizado correctamente.');
END;


------------------------ ELIMINAR PRODUCTO ------------------------

CREATE OR REPLACE PROCEDURE ELIMINAR_PRODUCTO(
    CODIGO_IN IN INT
) AS
BEGIN
    DELETE FROM PRODUCTOS
    WHERE CODIGO = CODIGO_IN;
    
    DBMS_OUTPUT.PUT_LINE('Producto eliminado correctamente.');
END;


EXEC INSERTAR_PRODUCTO(102, 'Jeans', 'Azul', 50, 1500);

EXEC INSERTAR_PRODUCTO(103, 'Jeans', 'Negro', 100, 1700);

EXEC ACTUALIZAR_PRODUCTO(102, 'Jeans', 'Negro', 45, 1600);

EXEC ELIMINAR_PRODUCTO(102);

SELECT * FROM VISTA_PRODUCTO WHERE CODIGO = :codigo_in;




---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------

SP


CREATE OR REPLACE PROCEDURE REGISTRAR_VENTA(
    MONTO_IN NUMBER,
    PRODUCTOS_IN VARCHAR2,
    PAGO_IN VARCHAR2,
    COMPRADOR_IN VARCHAR2,
    VENDEDOR_IN VARCHAR2,
    CANTIDADES_IN NUMBER
) AS
    EXISTENCIAS INT;
BEGIN
    -- Verifica si hay suficientes existencias
    SELECT CANTIDAD INTO EXISTENCIAS 
    FROM PRODUCTOS 
    WHERE NOMBRE = PRODUCTOS_IN;

    IF EXISTENCIAS < CANTIDADES_IN THEN
        RAISE_APPLICATION_ERROR(-20001, 'Error: No hay suficientes existencias para la venta.');
    END IF;

    -- Inserta venta si hay existencias
    INSERT INTO VENTAS (MONTO, PRODUCTOS, PAGO, COMPRADOR, VENDEDOR, FECHA, CANTIDADES)
    VALUES (MONTO_IN, PRODUCTOS_IN, PAGO_IN, COMPRADOR_IN, VENDEDOR_IN, SYSDATE, CANTIDADES_IN);

    -- Actualiza inventario
    UPDATE PRODUCTOS 
    SET CANTIDAD = CANTIDAD - CANTIDADES_IN 
    WHERE NOMBRE = PRODUCTOS_IN;

    DBMS_OUTPUT.PUT_LINE('Venta registrada correctamente.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: Producto no encontrado.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al registrar la venta: ' || SQLERRM);
END;


BEGIN
    REGISTRAR_VENTA(
        MONTO_IN => 15000,
        PRODUCTOS_IN => 'Jeans',
        PAGO_IN => 'Tarjeta',
        COMPRADOR_IN => '117880731',
        VENDEDOR_IN => '117880731',
        CANTIDADES_IN => 3
    );
END;


SELECT * FROM VENTAS;
SELECT * FROM PRODUCTOS;

------
CREATE OR REPLACE PROCEDURE ACTUALIZAR_INVENTARIO(
    CODIGO_IN INT,
    CANTIDAD_IN INT
) AS
BEGIN
    UPDATE PRODUCTOS
    SET CANTIDAD = CANTIDAD + CANTIDAD_IN
    WHERE CODIGO = CODIGO_IN;

    DBMS_OUTPUT.PUT_LINE('Inventario actualizado correctamente.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: Producto no encontrado.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al actualizar inventario: ' || SQLERRM);
END;

BEGIN
    ACTUALIZAR_INVENTARIO(
        CODIGO_IN => 101,
        CANTIDAD_IN => 5
    );
END;

SELECT * FROM PRODUCTOS WHERE CODIGO = 101;


----

CREATE OR REPLACE PROCEDURE REGISTRAR_CLIENTE(
    CEDULA_IN VARCHAR2,
    NOMBRE_IN VARCHAR2,
    APELLIDO_IN VARCHAR2,
    TELEFONO_IN VARCHAR2,
    CORREO_IN VARCHAR2
) AS
BEGIN
    IF CEDULA_IN IS NULL OR NOMBRE_IN IS NULL OR APELLIDO_IN IS NULL THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error: Datos faltantes para el cliente.');
    END IF;

    -- Inserta cliente
    INSERT INTO CLIENTES (CEDULA, NOMBRE, PRIMER_APELLIDO, TELEFONO, CORREO)
    VALUES (CEDULA_IN, NOMBRE_IN, APELLIDO_IN, TELEFONO_IN, CORREO_IN);

    DBMS_OUTPUT.PUT_LINE('Cliente registrado correctamente.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al registrar cliente: ' || SQLERRM);
END;


BEGIN
    REGISTRAR_CLIENTE(
        CEDULA_IN => '555666222',
        NOMBRE_IN => 'Carlos',
        APELLIDO_IN => 'Ramírez',
        TELEFONO_IN => '88885555',
        CORREO_IN => 'carlos.ramirez@mail.com'
    );
END;

SELECT * FROM CLIENTES WHERE CEDULA = '555666222';


------
FUNCIONES

-----1------

CREATE OR REPLACE FUNCTION CALCULAR_PRECIO_TOTAL(
    PRECIO_IN NUMBER,
    CANTIDAD_IN NUMBER
) RETURN NUMBER IS
BEGIN
    RETURN PRECIO_IN * CANTIDAD_IN;
END;

SELECT CALCULAR_PRECIO_TOTAL(7500, 3) AS PRECIO_TOTAL FROM DUAL;


----2-----
CREATE OR REPLACE FUNCTION PRODUCTOS_AGOTANDOSE(
    LIMITE_IN INT
) RETURN SYS_REFCURSOR IS
    CURSOR_PRODUCTOS SYS_REFCURSOR;
BEGIN
    OPEN CURSOR_PRODUCTOS FOR
    SELECT * FROM PRODUCTOS WHERE CANTIDAD <= LIMITE_IN;
    RETURN CURSOR_PRODUCTOS;
END;

DECLARE
    CURSOR_PRODUCTOS SYS_REFCURSOR;
    PRODUCTO PRODUCTOS%ROWTYPE;
BEGIN
    CURSOR_PRODUCTOS := PRODUCTOS_AGOTANDOSE(10); -- Límite: 10 unidades
    LOOP
        FETCH CURSOR_PRODUCTOS INTO PRODUCTO;
        EXIT WHEN CURSOR_PRODUCTOS%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Producto: ' || PRODUCTO.NOMBRE || ' | Cantidad: ' || PRODUCTO.CANTIDAD);
    END LOOP;
    CLOSE CURSOR_PRODUCTOS;
END;

------3------
CREATE OR REPLACE FUNCTION CALCULAR_MONTO(
    MONTO_IN NUMBER,
    IMPUESTO_IN NUMBER,
    DESCUENTO_IN NUMBER
) RETURN NUMBER IS
BEGIN
    RETURN (MONTO_IN + (MONTO_IN * IMPUESTO_IN / 100)) - DESCUENTO_IN;
END;

SELECT CALCULAR_MONTO(15000, 13, 1000) AS MONTO_FINAL FROM DUAL;


-------------

Paquetes:


-------1-------

CREATE OR REPLACE PACKAGE PKG_VENTAS AS
    PROCEDURE REGISTRAR_VENTA(
        MONTO_IN NUMBER,
        PRODUCTOS_IN VARCHAR2,
        PAGO_IN VARCHAR2,
        COMPRADOR_IN VARCHAR2,
        VENDEDOR_IN VARCHAR2,
        CANTIDADES_IN NUMBER
    );
    FUNCTION CALCULAR_MONTO(
        MONTO_IN NUMBER,
        IMPUESTO_IN NUMBER,
        DESCUENTO_IN NUMBER
    ) RETURN NUMBER;
END PKG_VENTAS;

CREATE OR REPLACE PACKAGE BODY PKG_VENTAS AS
    PROCEDURE REGISTRAR_VENTA(
        MONTO_IN NUMBER,
        PRODUCTOS_IN VARCHAR2,
        PAGO_IN VARCHAR2,
        COMPRADOR_IN VARCHAR2,
        VENDEDOR_IN VARCHAR2,
        CANTIDADES_IN NUMBER
    ) IS
    BEGIN
        -- Aquí va la lógica del procedimiento
        NULL; -- Placeholder
    END REGISTRAR_VENTA;

    FUNCTION CALCULAR_MONTO(
        MONTO_IN NUMBER,
        IMPUESTO_IN NUMBER,
        DESCUENTO_IN NUMBER
    ) RETURN NUMBER IS
    BEGIN
        RETURN (MONTO_IN + (MONTO_IN * IMPUESTO_IN / 100)) - DESCUENTO_IN;
    END CALCULAR_MONTO;
END PKG_VENTAS;


BEGIN
    PKG_VENTAS.REGISTRAR_VENTA(
        MONTO_IN => 10000,
        PRODUCTOS_IN => 'Jeans',
        PAGO_IN => 'Efectivo',
        COMPRADOR_IN => '117880731',
        VENDEDOR_IN => '117880731',
        CANTIDADES_IN => 2
    );
END;

SELECT PKG_VENTAS.CALCULAR_MONTO(10000, 15, 500) AS MONTO_FINAL FROM DUAL;


------2------

CREATE OR REPLACE PACKAGE PKG_INVENTARIO AS
    PROCEDURE ACTUALIZAR_INVENTARIO(
        CODIGO_IN INT,
        CANTIDAD_IN INT
    );
    FUNCTION CALCULAR_PRECIO_TOTAL(
        PRECIO_IN NUMBER,
        CANTIDAD_IN NUMBER
    ) RETURN NUMBER;
END PKG_INVENTARIO;

CREATE OR REPLACE PACKAGE BODY PKG_INVENTARIO AS
    PROCEDURE ACTUALIZAR_INVENTARIO(
        CODIGO_IN INT,
        CANTIDAD_IN INT
    ) IS
    BEGIN
        UPDATE PRODUCTOS
        SET CANTIDAD = CANTIDAD + CANTIDAD_IN
        WHERE CODIGO = CODIGO_IN;
    END;

    FUNCTION CALCULAR_PRECIO_TOTAL(
        PRECIO_IN NUMBER,
        CANTIDAD_IN NUMBER
    ) RETURN NUMBER IS
    BEGIN
        RETURN PRECIO_IN * CANTIDAD_IN;
    END;
END PKG_INVENTARIO;


BEGIN
    PKG_INVENTARIO.ACTUALIZAR_INVENTARIO(
        CODIGO_IN => 101, 
        CANTIDAD_IN => 10
    );
END;


SELECT * FROM PRODUCTOS WHERE CODIGO = 101;

SELECT PKG_INVENTARIO.CALCULAR_PRECIO_TOTAL(7500, 5) AS PRECIO_TOTAL FROM DUAL;


BEGIN
    -- Agrega más unidades al inventario
    PKG_INVENTARIO.ACTUALIZAR_INVENTARIO(
        CODIGO_IN => 101, 
        CANTIDAD_IN => 20
    );

    -- Calcula el precio total para 15 unidades
    DBMS_OUTPUT.PUT_LINE('Precio Total: ' || PKG_INVENTARIO.CALCULAR_PRECIO_TOTAL(7500, 20));
END;


SELECT * FROM PRODUCTOS WHERE CODIGO = 101;




SQL_DINAMICO

CREATE OR REPLACE PROCEDURE REPORTE_PRODUCTOS(
    FILTRO VARCHAR2
) AS
    QUERY VARCHAR2(1000);
    CURSOR_RESULT SYS_REFCURSOR;
    PRODUCTO_ROW PRODUCTOS%ROWTYPE;
BEGIN
    -- Crea la consulta dinámica
    QUERY := 'SELECT * FROM PRODUCTOS WHERE ' || FILTRO;
    
    -- Abre el cursor dinámico
    OPEN CURSOR_RESULT FOR QUERY;

    -- Muestra cada fila del resultado
    LOOP
        FETCH CURSOR_RESULT INTO PRODUCTO_ROW;
        EXIT WHEN CURSOR_RESULT%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE(
            'Producto: ' || PRODUCTO_ROW.NOMBRE || 
            ', Precio: ' || PRODUCTO_ROW.PRECIO || 
            ', Cantidad: ' || PRODUCTO_ROW.CANTIDAD
        );
    END LOOP;

    -- Cierra el cursor
    CLOSE CURSOR_RESULT;

    -- Mensaje adicional
    DBMS_OUTPUT.PUT_LINE('Consulta dinámica ejecutada: ' || QUERY);
END;


BEGIN
    REPORTE_PRODUCTOS('CANTIDAD >= 20');
END;

SET SERVEROUTPUT ON;


